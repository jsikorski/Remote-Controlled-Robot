<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GHIElectronics.NETMF.Glide</name>
    </assembly>
    <members>
        <member name="T:GHIElectronics.NETMF.Glide.UI.Image">
            <summary>
            The Image component allows displaying images.
            </summary>
            <example>
  Create a new .NET Micro Framework project using the Console Application template and call it "Test".
  Next, open Resources.resx, select Add Resource and click Add New Text File.
  In the prompt, name the new resource "Window" and click Add.
  Now, copy the XML below and paste it into the file and save.
  <code>
    <![CDATA[
<Glide Version="x.x.x">
  <Window Name="window" Width="320" Height="240" BackColor="00A9AF">
    <Image Name="image" X="90" Y="95" Width="140" Height="50" Alpha="255"/>
  </Window>
</Glide>
  ]]>
  </code>
  Open Program.cs and replace the code with the code below:
  <code>
    <![CDATA[
using System.Threading;

using GHIElectronics.NETMF.Glide;
using GHIElectronics.NETMF.Glide.Display;
using GHIElectronics.NETMF.Glide.UI;

namespace Test
{
    public class Program
    {
        // This will hold the main window.
        static Window window;

        public static void Main()
        {
            // Load the window
            window = GlideLoader.LoadWindow(Resources.GetString(Resources.StringResources.Window));

            // Activate touch
            GlideTouch.Initialize();

            // Initialize the window.
            InitWin();

            // Assigning a window to MainWindow flushes it to the screen.
            // This also starts event handling on the window.
            Glide.MainWindow = window;

            Thread.Sleep(-1);
        }

        static void InitWin()
        {
            Image image = (Image)window.GetChildByName("image");
            image.Bitmap = Resources.GetBitmap(Resources.BitmapResources.logo);
        }
    }
}
  ]]>
  </code>
  Before we run it, we must add some references by right-clicking References and selecting Add Reference.
  In the new window select the Browse tab, locate GHIElectronics.NETMF.Glide and click Ok.
  This example also has a Resource image called "logo" that's 140 x 50. Once you have the image, double-click Resources.resx and click Add Resource.
  Select Add Existing File... locate the image file and click Open. Now that everything is ready, press F5 to run the example.
</example>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.Display.DisplayObject">
            <summary>
            The DisplayObject is the base class for all objects.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.Display.DisplayObject.Name">
            <summary>
            Indicates the instance name of the DisplayObject.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.Display.DisplayObject.Alpha">
            <summary>
            Indicates the alpha transparency value of the object specified.
            </summary>
            <remarks>Valid values are 0 (fully transparent) and 255 (fully opaque). Default value is 255.</remarks>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.Display.DisplayObject.Visible">
            <summary>
            Indicates whether or not the DisplayObject is visible.
            </summary>
            <remarks>Invisible objects are not drawn nor do they receive touch events.</remarks>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.Display.DisplayObject.Enabled">
            <summary>
            Indicates whether or not the DisplayObject is enabled.
            </summary>
            <remarks>Disabled objects do not receive touch events.</remarks>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.Display.DisplayObject.Interactive">
            <summary>
            Indicates whether or not the DisplayObject is interactive.
            </summary>
            <remarks>Non-interactive objects do not receive touch events. This allows disabled objects to keep their state.</remarks>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.Display.DisplayObject.Tag">
            <summary>
            Object that contains data about the display object.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.Display.DisplayObject.Parent">
            <summary>
            Indicates the DisplayObjectContainer object that contains this display object.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Display.DisplayObject.TriggerTapEvent(System.Object)">
            <summary>
            Triggers a tap event.
            </summary>
            <param name="sender">Object associated with the event.</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Display.DisplayObject.TapEventIsNull">
            <summary>
            Is TapEvent null?
            </summary>
            <returns>True if TapEvent is null; false otherwise.</returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Display.DisplayObject.TriggerGestureEvent(System.Object,GHIElectronics.NETMF.Glide.TouchGestureEventArgs)">
            <summary>
            Triggers a gesture event.
            </summary>
            <param name="sender">Object associated with the event.</param>
            <param name="args">Touch gesture event arguments.</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Display.DisplayObject.Render">
            <summary>
            Renders this display object.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Display.DisplayObject.Render(Microsoft.SPOT.Bitmap)">
            <summary>
            Renders this display object on a specified bitmap.
            </summary>
            <param name="bitmap"></param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Display.DisplayObject.Invalidate">
            <summary>
            Renders this display object and flushes it to the screen.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Display.DisplayObject.OnTouchDown(GHIElectronics.NETMF.Glide.TouchEventArgs)">
            <summary>
            Handles touch down events.
            </summary>
            <param name="e">Touch event arguments.</param>
            <returns>Touch event arguments.</returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Display.DisplayObject.OnTouchUp(GHIElectronics.NETMF.Glide.TouchEventArgs)">
            <summary>
            Handles touch up events.
            </summary>
            <param name="e">Touch event arguments.</param>
            <returns>Touch event arguments.</returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Display.DisplayObject.OnTouchMove(GHIElectronics.NETMF.Glide.TouchEventArgs)">
            <summary>
            Handles touch move events.
            </summary>
            <param name="e">Touch event arguments.</param>
            <returns>Touch event arguments.</returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Display.DisplayObject.OnTouchGesture(GHIElectronics.NETMF.Glide.TouchGestureEventArgs)">
            <summary>
            Handles touch gesture events.
            </summary>
            <param name="e">Touch event arguments.</param>
            <returns>Touch event arguments.</returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Display.DisplayObject.Dispose">
            <summary>
            Disposes all disposable objects in this display object.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.Display.DisplayObject.X">
            <summary>
            Indicates the x coordinate of the DisplayObject instance relative to the local coordinates of the parent DisplayObjectContainer.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.Display.DisplayObject.Y">
            <summary>
            Indicates the y coordinate of the DisplayObject instance relative to the local coordinates of the parent DisplayObjectContainer.
            </summary>
        </member>
        <member name="E:GHIElectronics.NETMF.Glide.Display.DisplayObject.TapEvent">
            <summary>
            Tap event.
            </summary>
        </member>
        <member name="E:GHIElectronics.NETMF.Glide.Display.DisplayObject.GestureEvent">
            <summary>
            Gesture event.
            </summary>
        </member>
        <member name="P:GHIElectronics.NETMF.Glide.Display.DisplayObject.Width">
            <summary>
            Indicates the width of the display object, in pixels.
            </summary>
        </member>
        <member name="P:GHIElectronics.NETMF.Glide.Display.DisplayObject.Height">
            <summary>
            Indicates the height of the display object, in pixels.
            </summary>
        </member>
        <member name="P:GHIElectronics.NETMF.Glide.Display.DisplayObject.Rect">
            <summary>
            Indicates the rectangle bounds of this display object.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.Image.#ctor(System.String,System.UInt16,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new Image.
            </summary>
            <param name="name">Name</param>
            <param name="alpha">Alpha</param>
            <param name="x">X-axis position.</param>
            <param name="y">Y-axis position.</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.Image.Render">
            <summary>
            Renders the Image onto it's parent container's graphics.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.Image.OnTouchDown(GHIElectronics.NETMF.Glide.TouchEventArgs)">
            <summary>
            Handles the touch down event.
            </summary>
            <param name="e">Touch event arguments.</param>
            <returns>Touch event arguments.</returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.Image.OnTouchUp(GHIElectronics.NETMF.Glide.TouchEventArgs)">
            <summary>
            Handles the touch up event.
            </summary>
            <param name="e">Touch event arguments.</param>
            <returns>Touch event arguments.</returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.Image.Dispose">
            <summary>
            Disposes all disposable objects in this object.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.Image.FillRect(GHIElectronics.NETMF.Glide.Geom.Rectangle)">
            <summary>
            Fills a rectangle on this image's parent container's graphics using it's Bitmap.
            </summary>
            <param name="rect"></param>
        </member>
        <member name="P:GHIElectronics.NETMF.Glide.UI.Image.Bitmap">
            <summary>
            Bitmap
            </summary>
        </member>
        <member name="P:GHIElectronics.NETMF.Glide.UI.Image.Stretch">
            <summary>
            Indicates whether or not the image should be stretched if the control is larger than the bitmap.
            </summary>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.UI.DataGridColumn">
            <summary>
            The DataGridColumn class describes a column in a DataGrid component.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.DataGridColumn.Label">
            <summary>
            The column name to be displayed.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.DataGridColumn.Width">
            <summary>
            The width of the column, in pixels.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.DataGridColumn.Order">
            <summary>
            Indicates the default order of this column.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.DataGridColumn.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new DataGridColumn instance.
            </summary>
            <param name="label"></param>
            <param name="width"></param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.DataGridColumn.ToggleOrder">
            <summary>
            Toggles the ordering of this column.
            </summary>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.UI.TextBlock">
            <summary>
            The TextBlock component is a multiline text field.
            </summary>
            <example>
  Create a new .NET Micro Framework project using the Console Application template and call it "Test".
  Next, open Resources.resx, select Add Resource and click Add New Text File.
  In the prompt, name the new resource "Window" and click Add.
  Now, copy the XML below and paste it into the file and save.
  <code>
    <![CDATA[
<Glide Version="x.x.x">
  <Window Name="window" Width="320" Height="240" BackColor="dce3e7">
    <TextBlock Name="textBlock" X="110" Y="104" Width="100" Height="32" Alpha="255" Text="I'm a label." TextAlign="Center" Font="4" FontColor="000000"/>
  </Window>
</Glide>
  ]]>
  </code>
  Open Program.cs and replace the code with the code below:
  <code>
    <![CDATA[
using System.Threading;

using GHIElectronics.NETMF.Glide;
using GHIElectronics.NETMF.Glide.Display;
using GHIElectronics.NETMF.Glide.UI;

namespace Test
{
    public class Program
    {
        // This will hold the main window.
        static Window window;

        public static void Main()
        {
            // Load the window
            window = GlideLoader.LoadWindow(Resources.GetString(Resources.StringResources.Window));

            // Activate touch
            GlideTouch.Initialize();

            // Initialize the window.
            InitWin();

            // Assigning a window to MainWindow flushes it to the screen.
            // This also starts event handling on the window.
            Glide.MainWindow = window;

            Thread.Sleep(-1);
        }

        static void InitWin()
        {
            // Get the TextBlock
            TextBlock textBlock = (TextBlock)window.GetChildByName("textBlock");
            textBlock.TapEvent += new OnTap(label_TapEvent);
        }

        static void label_TapEvent(object sender)
        {
            TextBlock textBlock = (TextBlock)window.GetChildByName("textBlock");
            string originalText = textBlock.Text;

            // Change the text
            textBlock.Text = "I was tapped.";
            
            window.FillRect(textBlock.Rect);
            textBlock.Invalidate();

            // Wait for 3 seconds and revert.
            Thread.Sleep(3000);
            textBlock.Text = originalText;
            window.FillRect(textBlock.Rect);
            textBlock.Invalidate();
        }
    }
}
  ]]>
  </code>
  Before we run it, we must add the Glide reference by right-clicking References and selecting Add Reference.
  In the new window select the Browse tab, locate GHIElectronics.NETMF.Glide and click Ok.
  Now that everything is ready, press F5 to run the example.
</example>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.TextBlock.#ctor(System.String,System.UInt16,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new TextBlock.
            </summary>
            <param name="name">Name</param>
            <param name="alpha">Alpha</param>
            <param name="x">X-axis position.</param>
            <param name="y">Y-axis position.</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.TextBlock.Render">
            <summary>
            Renders the TextBlock onto it's parent container's graphics.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.TextBlock.OnTouchDown(GHIElectronics.NETMF.Glide.TouchEventArgs)">
            <summary>
            Handles the touch down event.
            </summary>
            <param name="e">Touch event arguments.</param>
            <returns>Touch event arguments.</returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.TextBlock.OnTouchUp(GHIElectronics.NETMF.Glide.TouchEventArgs)">
            <summary>
            Handles the touch up event.
            </summary>
            <param name="e">Touch event arguments.</param>
            <returns>Touch event arguments.</returns>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.TextBlock.Text">
            <summary>
            A string containing the text.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.TextBlock.TextAlign">
            <summary>
            Text horizonal alignement within the textfield.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.TextBlock.TextVerticalAlign">
            <summary>
            Textfield's vertical alignement within the TextBlock.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.TextBlock.Font">
            <summary>
            Font used by the text.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.TextBlock.FontColor">
            <summary>
            Indicates the font color.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.TextBlock.BackColor">
            <summary>
            Background color.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.TextBlock.ShowBackColor">
            <summary>
            Indicates whether or not a background color will be shown.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.TextBlock.For">
            <summary>
            Indicates a CheckBox or RadioButton this label can toggle.
            </summary>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.Direction">
            <summary>
            Direction
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.Direction.Left">
            <summary>
            Left
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.Direction.Right">
            <summary>
            Right
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.Direction.Up">
            <summary>
            Up
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.Direction.Down">
            <summary>
             Down
            </summary>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.HorizontalAlignment">
            <summary>
            Horizontal Alignment
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.HorizontalAlignment.Left">
            <summary>
            Left
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.HorizontalAlignment.Center">
            <summary>
            Center
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.HorizontalAlignment.Right">
            <summary>
            Right
            </summary>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.VerticalAlignment">
            <summary>
            Vertical Alignment
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.VerticalAlignment.Top">
            <summary>
            Top
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.VerticalAlignment.Middle">
            <summary>
            Middle
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.VerticalAlignment.Bottom">
            <summary>
            Bottom
            </summary>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.ModalButtons">
            <summary>
            Modal Buttons
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.ModalButtons.Ok">
            <summary>
            Ok
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.ModalButtons.OkCancel">
            <summary>
            Ok, Cancel
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.ModalButtons.AbortRetryIgnore">
            <summary>
            Abort, Retry, Ignore
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.ModalButtons.YesNo">
            <summary>
            Yes, No
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.ModalButtons.YesNoCancel">
            <summary>
            Yes, No, Cancel
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.ModalButtons.RetryCancel">
            <summary>
            Retry, Cancel
            </summary>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.ModalResult">
            <summary>
            Modal Result
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.ModalResult.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.ModalResult.Ok">
            <summary>
            Ok
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.ModalResult.Cancel">
            <summary>
            Cancel
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.ModalResult.Abort">
            <summary>
            Abort
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.ModalResult.Retry">
            <summary>
            Retry
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.ModalResult.Ignore">
            <summary>
            Ignore
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.ModalResult.Yes">
            <summary>
            Yes
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.ModalResult.No">
            <summary>
            No
            </summary>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.UI.ProgressBar">
            <summary>
            The ProgressBar component displays the progress of content that is being loaded.
            </summary>
            <example>
  Create a new .NET Micro Framework project using the Console Application template and call it "Test".
  Next, open Resources.resx, select Add Resource and click Add New Text File.
  In the prompt, name the new resource "Window" and click Add.
  Now, copy the XML below and paste it into the file and save.
  <code>
    <![CDATA[
<Glide Version="x.x.x">
  <Window Name="window" Width="320" Height="240" BackColor="dce3e7">
    <ProgressBar Name="progressBar" X="85" Y="112" Width="150" Height="16" Alpha="255" Direction="Right" MaxValue="100" Value="0"/>
  </Window>
</Glide>
  ]]>
  </code>
  Open Program.cs and replace the code with the code below:
  <code>
    <![CDATA[
using System.Threading;

using GHIElectronics.NETMF.Glide;
using GHIElectronics.NETMF.Glide.Display;
using GHIElectronics.NETMF.Glide.UI;

namespace Test
{
    public class Program
    {
        // This will hold the main window.
        static Window window;

        public static void Main()
        {
            // Load the window
            window = GlideLoader.LoadWindow(Resources.GetString(Resources.StringResources.Window));

            // Activate touch
            GlideTouch.Initialize();

            // Initialize the window.
            InitWin();

            // Assigning a window to MainWindow flushes it to the screen.
            // This also starts event handling on the window.
            Glide.MainWindow = window;

            // Imitate something is being loaded.
            Loading();

            Thread.Sleep(-1);
        }

        static void InitWin()
        {
            // Get the ProgressBar
            ProgressBar progressBar = (ProgressBar)window.GetChildByName("progressBar");
            progressBar.Value = 0;

            // Let's make the max value higher.
            progressBar.MaxValue = 1000;
        }

        static void Loading()
        {
            ProgressBar progressBar = (ProgressBar)window.GetChildByName("progressBar");

            while (progressBar.Value < progressBar.MaxValue)
            {
                progressBar.Value += 5;
                // Since the progress bar is always moving forward calling
                // invalidate to redraw it over itself is sufficient enough.
                progressBar.Invalidate();

                Thread.Sleep(100);
            }
        }
    }
}
  ]]>
  </code>
  Before we run it, we must add the Glide reference by right-clicking References and selecting Add Reference.
  In the new window select the Browse tab, locate GHIElectronics.NETMF.Glide and click Ok.
  Now that everything is ready, press F5 to run the example.
</example>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.ProgressBar.#ctor(System.String,System.UInt16,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new ProgressBar.
            </summary>
            <param name="name">Name</param>
            <param name="alpha">Alpha</param>
            <param name="x">X-axis position.</param>
            <param name="y">Y-axis position.</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.ProgressBar.Render">
            <summary>
            Renders the ProgressBar onto it's parent container's graphics.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.ProgressBar.Dispose">
            <summary>
            Disposes all disposable objects in this object.
            </summary>
        </member>
        <member name="P:GHIElectronics.NETMF.Glide.UI.ProgressBar.Direction">
            <summary>
            Direction in which the load bar expands.
            </summary>
        </member>
        <member name="P:GHIElectronics.NETMF.Glide.UI.ProgressBar.MaxValue">
            <summary>
            Maximum value
            </summary>
        </member>
        <member name="P:GHIElectronics.NETMF.Glide.UI.ProgressBar.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.Geom.Rectangle">
            <summary>
            A Rectangle object is defined by its position, width and height.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.Geom.Rectangle.X">
            <summary>
            The x coordinate of the top-left corner of the rectangle.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.Geom.Rectangle.Y">
            <summary>
            The y coordinate of the top-left corner of the rectangle.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.Geom.Rectangle.Width">
            <summary>
            The width of the rectangle, in pixels.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.Geom.Rectangle.Height">
            <summary>
            The height of the rectangle, in pixels.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Geom.Rectangle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new Rectangle.
            </summary>
            <param name="x">X-axis position.</param>
            <param name="y">Y-axis position.</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Geom.Rectangle.Clone">
            <summary>
            Clones this rectangle.
            </summary>
            <returns>Rectangle object.</returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Geom.Rectangle.Contains(System.Int32,System.Int32)">
            <summary>
            Determines whether the specified point is contained within the rectangular region.
            </summary>
            <param name="x">X-axis position.</param>
            <param name="y">Y-axis position.</param>
            <returns>True if the X-axis and Y-axis are within this rectangle, otherwise false.</returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Geom.Rectangle.Contains(GHIElectronics.NETMF.Glide.Geom.Point)">
            <summary>
            Determines whether the specified point is contained within the rectangular region
            </summary>
            <param name="point">Position of the touch.</param>
            <returns>True if the point is within this rectangle, otherwise false.</returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Geom.Rectangle.Contains(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines whether the object speficied by the parameters is contained within this Rectangle object.
            </summary>
            <param name="x">X-axis position.</param>
            <param name="y">Y-axis position.</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <returns>True if the area within this rectangle, otherwise false.</returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Geom.Rectangle.Contains(GHIElectronics.NETMF.Glide.Geom.Rectangle)">
            <summary>
            Determines whether the Rectangle object parameter is contained within this Rectangle object.
            </summary>
            <param name="rect">Rectangle</param>
            <returns>True if the rectangle is within this rectangle, otherwise false.</returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Geom.Rectangle.Intersects(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines whether the object speficied by the parameters intersects with this Rectangle object.
            </summary>
            <param name="x">X-axis position.</param>
            <param name="y">X-axis position.</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <returns></returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Geom.Rectangle.Intersects(GHIElectronics.NETMF.Glide.Geom.Rectangle)">
            <summary>
            Determines whether the Rectangle object parameter intersects with this Rectangle object.
            </summary>
            <param name="rect">Rectangle object.</param>
            <returns>True if the rectangle intersects with this rectangle, otherwise false.</returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Geom.Rectangle.ToString">
            <summary>
            Formats the rectangle as a string for debugging.
            </summary>
            <returns>The Rectangle as a string. E.g. [0, 0, 100, 100]</returns>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.UI.KeyboardText">
            <summary>
            The KeyboardText component displays multiline wrapping text.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.KeyboardText.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new KeyboardText.
            </summary>
            <param name="x">X-axis position.</param>
            <param name="y">Y-axis position.</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.KeyboardText.Render">
            <summary>
            Renders the KeyboardText on it's parent container's graphics.
            </summary>
        </member>
        <member name="P:GHIElectronics.NETMF.Glide.UI.KeyboardText.Text">
            <summary>
            A string of text.
            </summary>
        </member>
        <member name="P:GHIElectronics.NETMF.Glide.UI.KeyboardText.IsPassword">
            <summary>
            Indicates whether or not this is a password.
            </summary>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.UI.RadioButton">
            <summary>
            The RadioButton component lets a user to make a single selection from a set of choices.
            </summary>
            <example>
  Create a new .NET Micro Framework project using the Console Application template and call it "Test".
  Next, open Resources.resx, select Add Resource and click Add New Text File.
  In the prompt, name the new resource "Window" and click Add.
  Now, copy the XML below and paste it into the file and save.
  <code>
    <![CDATA[
<Glide Version="x.x.x">
  <Window Name="window" Width="320" Height="240" BackColor="dce3e7">
    <TextBlock Name="question" X="0" Y="20" Width="320" Height="32" Alpha="255" Text="Are you attending the event?" TextAlign="Center" Font="5" FontColor="000000"/>
    <RadioButton Name="radio1" X="60" Y="80" Width="32" Height="32" Alpha="255" Value="Yes" Checked="False" GroupName="radioButtonGroup" ShowBackground="True" Color="d4d4d4" OutlineColor="b8b8b8" SelectedColor="358bf6" SelectedOutlineColor="002dff"/>
    <RadioButton Name="radio2" X="60" Y="117" Width="32" Height="32" Alpha="255" Value="Maybe" Checked="False" GroupName="radioButtonGroup" ShowBackground="True" Color="d4d4d4" OutlineColor="b8b8b8" SelectedColor="358bf6" SelectedOutlineColor="002dff"/>
    <RadioButton Name="radio3" X="60" Y="154" Width="32" Height="32" Alpha="255" Value="No" Checked="False" GroupName="radioButtonGroup" ShowBackground="True" Color="d4d4d4" OutlineColor="b8b8b8" SelectedColor="358bf6" SelectedOutlineColor="002dff"/>
    <TextBlock Name="radio1Txt" X="102" Y="82" Width="60" Height="32" Alpha="255" Text="Yes" TextAlign="Left" TextVerticalAlign="Middle" Font="4" FontColor="000000"/>
    <TextBlock Name="radio2Txt" X="102" Y="119" Width="60" Height="32" Alpha="255" Text="Maybe" TextAlign="Left" TextVerticalAlign="Middle" Font="4" FontColor="000000"/>
    <TextBlock Name="radio3Txt" X="102" Y="156" Width="60" Height="32" Alpha="255" Text="No" TextAlign="Left" TextVerticalAlign="Middle" Font="4" FontColor="000000"/>
  </Window>
</Glide>
  ]]>
  </code>
  Open Program.cs and replace the code with the code below:
  <code>
    <![CDATA[
using System.Threading;

using Microsoft.SPOT;

using GHIElectronics.NETMF.Glide;
using GHIElectronics.NETMF.Glide.Display;
using GHIElectronics.NETMF.Glide.UI;

namespace Test
{
    public class Program
    {
        // This will hold the main window.
        static Window window;

        public static void Main()
        {
            // Load the window
            window = GlideLoader.LoadWindow(Resources.GetString(Resources.StringResources.Window));

            // Activate touch
            GlideTouch.Initialize();

            // Initialize the window.
            InitWin();

            // Assigning a window to MainWindow flushes it to the screen.
            // This also starts event handling on the window.
            Glide.MainWindow = window;

            Thread.Sleep(-1);
        }

        static void InitWin()
        {
            RadioButton radio;
            TextBlock textBlock;

            for (int i = 1; i < 4; i++)
            {
                // Add a tap event handler to show the current value.
                radio = (RadioButton)window.GetChildByName("radio" + i);
                radio.TapEvent += new OnTap(radio_TapEvent);

                // Assign the label to the radio button.
                textBlock = (TextBlock)window.GetChildByName("radio" + i + "Txt");
                textBlock.For = radio;
            }
        }

        static void radio_TapEvent(object sender)
        {
            string value = RadioButtonManager.GetValue("radioButtonGroup");
            Debug.Print("The group's current value: " + value);
        }
    }
}
  ]]>
  </code>
  Before we run it, we must add the Glide reference by right-clicking References and selecting Add Reference.
  In the new window select the Browse tab, locate GHIElectronics.NETMF.Glide and click Ok.
  Now that everything is ready, press F5 to run the example.
</example>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.RadioButton.#ctor(System.String,System.UInt16,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new RadioButton.
            </summary>
            <param name="name">Name</param>
            <param name="alpha">Alpha</param>
            <param name="x">X-axis position.</param>
            <param name="y">Y-axis position.</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.RadioButton.Render">
            <summary>
            Renders the RadioButton onto it's parent container's graphics.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.RadioButton.OnTouchDown(GHIElectronics.NETMF.Glide.TouchEventArgs)">
            <summary>
            Handles the touch down event.
            </summary>
            <param name="e">Touch event arguments.</param>
            <returns>Touch event arguments.</returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.RadioButton.OnTouchUp(GHIElectronics.NETMF.Glide.TouchEventArgs)">
            <summary>
            Handles the touch up event.
            </summary>
            <param name="e">Touch event arguments.</param>
            <returns>Touch event arguments.</returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.RadioButton.Dispose">
            <summary>
            Disposes all disposable objects in this object.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.RadioButton.Toggle">
            <summary>
            Toggles the radio button between selected and not selected.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.RadioButton.GroupName">
            <summary>
            The group this radio button belongs to.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.RadioButton.ShowBackground">
            <summary>
            Indicates whether or not to show the background box.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.RadioButton.OutlineColor">
            <summary>
            Outline color.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.RadioButton.Color">
            <summary>
            Color
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.RadioButton.SelectedOutlineColor">
            <summary>
            Selected outline color.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.RadioButton.SelectedColor">
            <summary>
            Selected color.
            </summary>
        </member>
        <member name="P:GHIElectronics.NETMF.Glide.UI.RadioButton.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="P:GHIElectronics.NETMF.Glide.UI.RadioButton.Checked">
            <summary>
            Indicates whether or not this radio button is checked.
            </summary>
            <remarks>Changing this property will trigger an Invalidate.</remarks>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.Colors">
            <summary>
            The Colors class contains a list of defined colors.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.Colors.Black">
            <summary>
            Black
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.Colors.Blue">
            <summary>
            Blue
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.Colors.Brown">
            <summary>
            Brown
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.Colors.DarkGray">
            <summary>
            Dark Gray
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.Colors.Fuchsia">
            <summary>
            Fushia
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.Colors.Gray">
            <summary>
            Gray
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.Colors.Green">
            <summary>
            Green
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.Colors.LightGray">
            <summary>
            Light Gray
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.Colors.Orange">
            <summary>
            Orange
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.Colors.Red">
            <summary>
            Red
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.Colors.Teal">
            <summary>
            Teal
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.Colors.Yellow">
            <summary>
            Yellow
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.Colors.White">
            <summary>
            White
            </summary>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.UI.Button">
            <summary>
            The Button component represents a rectangular button.
            </summary>
            <example>
  Create a new .NET Micro Framework project using the Console Application template and call it "Test".
  Next, open Resources.resx, select Add Resource and click Add New Text File.
  In the prompt, name the new resource "Window" and click Add.
  Now, copy the XML below and paste it into the file and save.
  <code>
    <![CDATA[
<Glide Version="x.x.x">
  <Window Name="window" Width="320" Height="240" BackColor="dce3e7">
    <Button Name="btn" X="100" Y="104" Width="120" Height="32" Alpha="255" Text="Click me" Font="4" FontColor="000000" DisabledFontColor="808080" TintColor="000000" TintAmount="0"/>
  </Window>
</Glide>
  ]]>
  </code>
  Open Program.cs and replace the code with the code below:
  <code>
    <![CDATA[
using System.Threading;

using Microsoft.SPOT;

using GHIElectronics.NETMF.Glide;
using GHIElectronics.NETMF.Glide.Display;
using GHIElectronics.NETMF.Glide.UI;

namespace Test
{
    public class Program
    {
        // This will hold the main window.
        static Window window;

        public static void Main()
        {
            // Load the window
            window = GlideLoader.LoadWindow(Resources.GetString(Resources.StringResources.Window));

            // Activate touch
            GlideTouch.Initialize();

            // Initialize the window.
            InitWin();

            // Assigning a window to MainWindow flushes it to the screen.
            // This also starts event handling on the window.
            Glide.MainWindow = window;

            Thread.Sleep(-1);
        }

        static void InitWin()
        {
            // Get the Button
            Button btn = (Button)window.GetChildByName("btn");

            // Listen for tap events
            btn.TapEvent += new OnTap(btn_TapEvent);
        }

        // Handle tap events
        static void btn_TapEvent(object sender)
        {
            Debug.Print("I can perform an action!");
        }

    }
}
  ]]>
  </code>
  Before we run it, we must add the Glide reference by right-clicking References and selecting Add Reference.
  In the new window select the Browse tab, locate GHIElectronics.NETMF.Glide and click Ok.
  Now that everything is ready, press F5 to run the example.
</example>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.Button.#ctor(System.String,System.UInt16,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new Button component.
            </summary>
            <param name="name">Name</param>
            <param name="alpha">Alpha</param>
            <param name="x">X-axis position.</param>
            <param name="y">Y-axis position.</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.Button.TriggerPressEvent(System.Object)">
            <summary>
            Triggers a press event.
            </summary>
            <param name="sender">Object associated with this event.</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.Button.TriggerReleaseEvent(System.Object)">
            <summary>
            Triggers a release event.
            </summary>
            <param name="sender">Object associated with this event.</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.Button.Render">
            <summary>
            Renders the Button onto it's parent container's graphics.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.Button.OnTouchDown(GHIElectronics.NETMF.Glide.TouchEventArgs)">
            <summary>
            Handles the touch down event.
            </summary>
            <param name="e">Touch event arguments.</param>
            <returns>Touch event arguments.</returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.Button.OnTouchUp(GHIElectronics.NETMF.Glide.TouchEventArgs)">
            <summary>
            Handles the touch up event.
            </summary>
            <param name="e">Touch event arguments.</param>
            <returns>Touch event arguments.</returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.Button.Dispose">
            <summary>
            Disposes all disposable objects in this object.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.Button.ButtonUp">
            <summary>
            Bitmap that represents the up state.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.Button.ButtonDown">
            <summary>
            Bitmap that represents the down state.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.Button.Text">
            <summary>
            Text on the button.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.Button.Font">
            <summary>
            Font used by the text.
            </summary>
            <remarks>This can be a font from Resources or one within Glide retrieved via the FontManager class.</remarks>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.Button.FontColor">
            <summary>
            Font color.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.Button.DisabledFontColor">
            <summary>
            Disabled font color.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.Button.TintColor">
            <summary>
            Color to tint the button.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.Button.TintAmount">
            <summary>
            Amount of tint to apply.
            </summary>
        </member>
        <member name="E:GHIElectronics.NETMF.Glide.UI.Button.PressEvent">
            <summary>
            Press event.
            </summary>
        </member>
        <member name="E:GHIElectronics.NETMF.Glide.UI.Button.ReleaseEvent">
            <summary>
            Release event.
            </summary>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.UI.Slider">
            <summary>
            The Slider component lets users select a value by sliding a knob along a track.
            </summary>
            <example>
  Create a new .NET Micro Framework project using the Console Application template and call it "Test".
  Next, open Resources.resx, select Add Resource and click Add New Text File.
  In the prompt, name the new resource "Window" and click Add.
  Now, copy the XML below and paste it into the file and save.
  <code>
    <![CDATA[
<Glide Version="x.x.x">
  <Window Name="window" Width="320" Height="240" BackColor="dce3e7">
    <Slider Name="voltSlider" X="145" Y="45" Width="30" Height="150" Alpha="255" Direction="vertical" SnapInterval="5" TickInterval="5" TickColor="000000" KnobSize="20" Minimum="0" Maximum="5" Value="3"/>
    <TextBlock Name="topVoltTxt" X="110" Y="13" Width="100" Height="32" Alpha="255" Text="5.000 Volts" TextAlign="Center" TextVerticalAlign="Bottom" Font="4" FontColor="929ba0"/>
    <TextBlock Name="botVoltTxt" X="110" Y="195" Width="100" Height="32" Alpha="255" Text="0 Volts" TextAlign="Center" TextVerticalAlign="Middle" Font="4" FontColor="929ba0"/>
    <TextBlock Name="curVoltTxt" X="20" Y="104" Width="100" Height="32" Alpha="255" Text="3.000 Volts" TextAlign="Left" Font="4" FontColor="FF0000"/>
  </Window>
</Glide>
  ]]>
  </code>
  Open Program.cs and replace the code with the code below:
  <code>
    <![CDATA[
using System.Threading;

using GHIElectronics.NETMF.Glide;
using GHIElectronics.NETMF.Glide.Display;
using GHIElectronics.NETMF.Glide.UI;

namespace Test
{
    public class Program
    {
        // This will hold the main window.
        static Window window;

        public static void Main()
        {
            // Load the window
            window = GlideLoader.LoadWindow(Resources.GetString(Resources.StringResources.Window));

            // Activate touch
            GlideTouch.Initialize();

            // Initialize the window.
            InitWindow();

            // Assigning a window to MainWindow flushes it to the screen.
            // This also starts event handling on the window.
            Glide.MainWindow = window;

            Thread.Sleep(-1);
        }

        static void InitWindow()
        {
            Slider slider = (Slider)window.GetChildByName("voltSlider");

            // Setup a value changed event handler.
            slider.ValueChangedEvent += new OnValueChanged(slider_ValueChangedEvent);
        }

        static void slider_ValueChangedEvent(object sender)
        {
            Slider slider = (Slider)window.GetChildByName("voltSlider");
            TextBlock curVoltTxt = (TextBlock)window.GetChildByName("curVoltTxt");

            // Overwrite the label rectangle area with the window background.
            window.FillRect(curVoltTxt.Rect);

            // Update the text block with the current volts.
            curVoltTxt.Text = slider.Value.ToString("F3") + " Volts";
            curVoltTxt.Invalidate();
        }
    }
}
  ]]>
  </code>
  Before we run it, we must add the Glide reference by right-clicking References and selecting Add Reference.
  In the new window select the Browse tab, locate GHIElectronics.NETMF.Glide and click Ok.
  Now that everything is ready, press F5 to run the example.
</example>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.Slider.#ctor(System.String,System.UInt16,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new Slider component.
            </summary>
            <param name="name">Name</param>
            <param name="alpha">Alpha</param>
            <param name="x">X-axis position.</param>
            <param name="y">Y-axis position.</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.Slider.TriggerValueChangedEvent(System.Object)">
            <summary>
            Triggers a value changed event.
            </summary>
            <param name="sender">Object associated with the event.</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.Slider.Render">
            <summary>
            Renders the Button onto it's parent container's graphics.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.Slider.OnTouchDown(GHIElectronics.NETMF.Glide.TouchEventArgs)">
            <summary>
            Handles the touch down event.
            </summary>
            <param name="e">Touch event arguments.</param>
            <returns>Touch event arguments.</returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.Slider.OnTouchUp(GHIElectronics.NETMF.Glide.TouchEventArgs)">
            <summary>
            Handles the touch up event.
            </summary>
            <param name="e">Touch event arguments.</param>
            <returns>Touch event arguments.</returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.Slider.OnTouchMove(GHIElectronics.NETMF.Glide.TouchEventArgs)">
            <summary>
            Handles the touch move event.
            </summary>
            <param name="e">Touch event arguments.</param>
            <returns>Touch event arguments.</returns>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.Slider.TickColor">
            <summary>
            Tick color.
            </summary>
        </member>
        <member name="E:GHIElectronics.NETMF.Glide.UI.Slider.ValueChangedEvent">
            <summary>
            Value changed event.
            </summary>
        </member>
        <member name="P:GHIElectronics.NETMF.Glide.UI.Slider.Direction">
            <summary>
            Direction of the slider; horizontal or vertical.
            </summary>
        </member>
        <member name="P:GHIElectronics.NETMF.Glide.UI.Slider.KnobSize">
            <summary>
            Size of the knob.
            </summary>
        </member>
        <member name="P:GHIElectronics.NETMF.Glide.UI.Slider.Maximum">
            <summary>
            Maximum value.
            </summary>
        </member>
        <member name="P:GHIElectronics.NETMF.Glide.UI.Slider.Minimum">
            <summary>
            Minimum value.
            </summary>
        </member>
        <member name="P:GHIElectronics.NETMF.Glide.UI.Slider.SnapInterval">
            <summary>
            Increment by which the value is increased or decreased as the user slides the knob.
            </summary>
        </member>
        <member name="P:GHIElectronics.NETMF.Glide.UI.Slider.TickInterval">
            <summary>
            Tick mark spacing relative to the maximum value.
            </summary>
        </member>
        <member name="P:GHIElectronics.NETMF.Glide.UI.Slider.Value">
            <summary>
            Gets or sets the current value.
            </summary>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.UI.SliderDirection">
            <summary>
            The orientation of the Slider component.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.SliderDirection.Horizontal">
            <summary>
            Horizontal
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.SliderDirection.Vertical">
            <summary>
            Vertical
            </summary>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.RadioButtonManager">
            <summary>
            The RadioButtonManager manages groups of RadioButtons.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.RadioButtonManager.GetValue(System.String)">
            <summary>
            Value of the selected radio button within a group.
            </summary>
            <param name="groupName">Name of the group.</param>
            <returns>Current value selected within the group.</returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.RadioButtonManager.GetCount(System.String)">
            <summary>
            Get the number of buttons in a group.
            </summary>
            <param name="groupName">Name of the group.</param>
            <returns>Number of buttons in the group.</returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.RadioButtonManager.OnTapEvent(System.Object)">
            <summary>
            Turns off the previously selected radio button.
            </summary>
            <param name="sender">Associated object with the sender.</param>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.UI.DataGrid">
            <summary>
            The DataGrid component is a list-based component that provides a grid of rows and columns.
            </summary>
            <example>
  Create a new .NET Micro Framework project using the Console Application template and call it "Test".
  Next, open Resources.resx, select Add Resource and click Add New Text File.
  In the prompt, name the new resource "Window" and click Add.
  Now, copy the XML below and paste it into the file and save.
  <code>
    <![CDATA[
<Glide Version="x.x.x">
  <Window Name="window" Width="320" Height="240" BackColor="dce3e7">
    <DataGrid Name="dataGrid" X="5" Y="5" Width="310" Height="150" Alpha="255" Font="4" RowCount="5" RowHeight="30" Draggable="True" TappableCells="True" SortableHeaders="True" ShowHeaders="True" ShowScrollbar="True" ScrollbarWidth="5" HeadersBackColor="707476" HeadersFontColor="FFFFFF" ItemsBackColor="FFFFFF" ItemsAltBackColor="F4F4F4" ItemsFontColor="000000" SelectedItemBackColor="FFF299" SelectedItemFontColor="000000" GridColor="BFC5C9" ScrollbarBackColor="C0C0C0" ScrollbarScrubberColor="000000"/>
    <TextBlock Name="textBlock1" X="5" Y="160" Width="50" Height="32" Alpha="255" Text="Scroll" TextAlign="Right" TextVerticalAlign="Middle" Font="3" FontColor="000000"/>
    <TextBlock Name="textBlock2" X="5" Y="202" Width="50" Height="32" Alpha="255" Text="Select" TextAlign="Right" TextVerticalAlign="Middle" Font="3" FontColor="000000"/>
    <TextBlock Name="textBlock3" X="175" Y="160" Width="40" Height="32" Alpha="255" Text="List" TextAlign="Right" TextVerticalAlign="Middle" Font="3" FontColor="000000"/>
    <Button Name="scrollUpBtn" X="60" Y="160" Width="45" Height="32" Alpha="255" Text="Up" Font="3" FontColor="000000" DisabledFontColor="808080" TintColor="000000" TintAmount="0"/>
    <Button Name="scrollDownBtn" X="110" Y="160" Width="60" Height="32" Alpha="255" Text="Down" Font="3" FontColor="000000" DisabledFontColor="808080" TintColor="000000" TintAmount="0"/>
    <Button Name="selectUpBtn" X="60" Y="202" Width="45" Height="32" Alpha="255" Text="Up" Font="3" FontColor="000000" DisabledFontColor="808080" TintColor="000000" TintAmount="0"/>
    <Button Name="selectDownBtn" X="110" Y="202" Width="60" Height="32" Alpha="255" Text="Down" Font="3" FontColor="000000" DisabledFontColor="808080" TintColor="000000" TintAmount="0"/>
    <Button Name="selectClearBtn" X="175" Y="202" Width="50" Height="32" Alpha="255" Text="Clear" Font="3" FontColor="000000" DisabledFontColor="808080" TintColor="000000" TintAmount="0"/>
    <Button Name="selectDeleteBtn" X="230" Y="202" Width="70" Height="32" Alpha="255" Text="Delete" Font="3" FontColor="000000" DisabledFontColor="808080" TintColor="000000" TintAmount="0"/>
    <Button Name="clearBtn" X="220" Y="160" Width="50" Height="32" Alpha="255" Text="Clear" Font="3" FontColor="000000" DisabledFontColor="808080" TintColor="000000" TintAmount="0"/>
    <Button Name="fillBtn" X="275" Y="160" Width="40" Height="32" Alpha="255" Text="Fill" Font="3" FontColor="000000" DisabledFontColor="808080" TintColor="000000" TintAmount="0"/>
  </Window>
</Glide>
    ]]>
  </code>
  Open Program.cs and replace the code with the code below:
  <code>
    <![CDATA[
using System;
using System.Threading;

using GHIElectronics.NETMF.Glide;
using GHIElectronics.NETMF.Glide.Display;
using GHIElectronics.NETMF.Glide.UI;

namespace Test
{
    public class Program
    {
        // This will hold the main window.
        static Window window;

        // Data Grid
        static DataGrid dataGrid;

        public static void Main()
        {
            // Load the window
            window = GlideLoader.LoadWindow(Resources.GetString(Resources.StringResources.Window));

            // Activate touch
            GlideTouch.Initialize();

            // Initialize the window.
            InitWin();

            // Assigning a window to MainWindow flushes it to the screen.
            // This also starts event handling on the window.
            Glide.MainWindow = window;

            Thread.Sleep(-1);
        }

        static void InitWin()
        {
            // Setup the dataGrid reference.
            dataGrid = (DataGrid)window.GetChildByName("dataGrid");

            // Possible configurations...
            //dataGrid.ShowHeaders = false;
            //dataGrid.SortableHeaders = false;
            //dataGrid.TappableCells = false;
            //dataGrid.Draggable = false;
            //dataGrid.ShowScrollbar = false;
            //dataGrid.ScrollbarWidth = 4;

            // Listen for tap cell events.
            dataGrid.TapCellEvent += new OnTapCell(dataGrid_TapCellEvent);

            // Create our three columns.
            dataGrid.AddColumn(new DataGridColumn("ID", 50));
            dataGrid.AddColumn(new DataGridColumn("First Name", 125));
            dataGrid.AddColumn(new DataGridColumn("Last Name", 125));

            // Populate the data grid with random data.
            Populate(false);

            // Add the data grid to the window before rendering it.
            window.AddChild(dataGrid);
            dataGrid.Render();

            // Setup the button controls.

            Button scrollUpBtn = (Button)window.GetChildByName("scrollUpBtn");
            scrollUpBtn.TapEvent += new OnTap(scrollUpBtn_TapEvent);

            Button scrollDownBtn = (Button)window.GetChildByName("scrollDownBtn");
            scrollDownBtn.TapEvent += new OnTap(scrollDownBtn_TapEvent);

            Button selectUpBtn = (Button)window.GetChildByName("selectUpBtn");
            selectUpBtn.TapEvent += new OnTap(selectUpBtn_TapEvent);

            Button selectDownBtn = (Button)window.GetChildByName("selectDownBtn");
            selectDownBtn.TapEvent += new OnTap(selectDownBtn_TapEvent);

            Button selectClearBtn = (Button)window.GetChildByName("selectClearBtn");
            selectClearBtn.TapEvent += new OnTap(selectClearBtn_TapEvent);

            Button selectDeleteBtn = (Button)window.GetChildByName("selectDeleteBtn");
            selectDeleteBtn.TapEvent += new OnTap(selectDeleteBtn_TapEvent);
            
            Button clearBtn = (Button)window.GetChildByName("clearBtn");
            clearBtn.TapEvent += new OnTap(clearBtn_TapEvent);

            Button fillBtn = (Button)window.GetChildByName("fillBtn");
            fillBtn.TapEvent += new OnTap(fillBtn_TapEvent);
        }

        static void Populate(bool invalidate)
        {
            // Add items with random data
            for (int i = 0; i < 20; i++)
            {
                // DataGridItems must contain an object array whose length matches the number of columns.
                dataGrid.AddItem(new DataGridItem(new object[3] { i, RandomString(10), RandomString(10) }));
            }

            if (invalidate)
                dataGrid.Invalidate();
        }

        static void dataGrid_TapCellEvent(object sender, TapCellEventArgs args)
        {
            // Get the data from the row we tapped.
            object[] data = dataGrid.GetRowData(args.RowIndex);
            if (data != null)
                GlideUtils.Debug.Print("GetRowData[" + args.RowIndex + "] = ", data);
        }

        static void scrollUpBtn_TapEvent(object sender)
        {
            dataGrid.ScrollUp(1);
            dataGrid.Invalidate();
        }

        static void scrollDownBtn_TapEvent(object sender)
        {
            dataGrid.ScrollDown(1);
            dataGrid.Invalidate();
        }

        static void selectUpBtn_TapEvent(object sender)
        {
            if (dataGrid.SelectedIndex > 0)
                dataGrid.SelectedIndex--;
        }

        static void selectDownBtn_TapEvent(object sender)
        {
            if (dataGrid.SelectedIndex < dataGrid.NumItems - 1)
                dataGrid.SelectedIndex++;
        }

        static void selectClearBtn_TapEvent(object sender)
        {
            dataGrid.SelectedIndex = -1;
        }

        static void selectDeleteBtn_TapEvent(object sender)
        {
            dataGrid.RemoveItemAt(dataGrid.SelectedIndex);
            dataGrid.Invalidate();
        }

        static void clearBtn_TapEvent(object sender)
        {
            dataGrid.Clear();
            dataGrid.Invalidate();
        }

        static void fillBtn_TapEvent(object sender)
        {
            Populate(true);
        }

        // -------------------------------------------------------------------
        // This is used to generate random strings.
        private static Random random = new Random((int)DateTime.Now.Ticks);
        private static string RandomString(int size)
        {
            string str = String.Empty;
            double d;
            ushort u;
            char ch;
            for (int i = 0; i < size; i++)
            {
                d = System.Math.Floor(26 * random.NextDouble() + 65);
                u = Convert.ToUInt16(d.ToString());
                ch = Convert.ToChar(u);
                str += ch;
            }

            return str;
        }

    }
}
    ]]>
  </code>
  Before we run it, we must add the Glide reference by right-clicking References and selecting Add Reference.
  In the new window select the Browse tab, locate GHIElectronics.NETMF.Glide and click Ok.
  Now that everything is ready, press F5 to run the example.
</example>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.DataGrid.#ctor(System.String,System.UInt16,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new DataGrid component.
            </summary>
            <param name="name">name</param>
            <param name="alpha">alpha</param>
            <param name="x">x</param>
            <param name="y">y</param>
            <param name="width">width</param>
            <param name="rowHeight">rowHeight</param>
            <param name="rowCount">rowCount</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.DataGrid.TriggerTapCellEvent(System.Object,GHIElectronics.NETMF.Glide.TapCellEventArgs)">
            <summary>
            Triggers a tap cell event.
            </summary>
            <param name="sender">Object associated with this event.</param>
            <param name="args">Tap cell event arguments.</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.DataGrid.Render">
            <summary>
            Renders the DataGrid onto it's parent container's graphics.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.DataGrid.OnTouchDown(GHIElectronics.NETMF.Glide.TouchEventArgs)">
            <summary>
            Handles the touch down event.
            </summary>
            <param name="e">Touch event arguments.</param>
            <returns>Touch event arguments.</returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.DataGrid.OnTouchUp(GHIElectronics.NETMF.Glide.TouchEventArgs)">
            <summary>
            Handles the touch up event.
            </summary>
            <param name="e">Touch event arguments.</param>
            <returns>Touch event arguments.</returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.DataGrid.OnTouchMove(GHIElectronics.NETMF.Glide.TouchEventArgs)">
            <summary>
            Handles the touch move event.
            </summary>
            <param name="e">Touch event arguments.</param>
            <returns>Touch event arguments.</returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.DataGrid.Dispose">
            <summary>
            Disposes all disposable objects in this object.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.DataGrid.AddColumn(GHIElectronics.NETMF.Glide.UI.DataGridColumn)">
            <summary>
            Adds a column.
            </summary>
            <param name="dataGridColumn">dataGridColumn</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.DataGrid.AddColumnAt(System.Int32,GHIElectronics.NETMF.Glide.UI.DataGridColumn)">
            <summary>
            Adds a column at a specified index.
            </summary>
            <param name="index">index</param>
            <param name="dataGridColumn">dataGridColumn</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.DataGrid.RemoveColumn(GHIElectronics.NETMF.Glide.UI.DataGridColumn)">
            <summary>
            Removes a column.
            </summary>
            <param name="dataGridColumn">dataGridColumn</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.DataGrid.RemoveColumnAt(System.Int32)">
            <summary>
            Removes a column at a specified index.
            </summary>
            <param name="index">index</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.DataGrid.AddItem(GHIElectronics.NETMF.Glide.UI.DataGridItem)">
            <summary>
            Adds an item.
            </summary>
            <param name="dataGridItem">dataGridItem</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.DataGrid.AddItemAt(System.Int32,GHIElectronics.NETMF.Glide.UI.DataGridItem)">
            <summary>
            Adds an item at a specified index.
            </summary>
            <param name="index">index</param>
            <param name="dataGridItem">dataGridItem</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.DataGrid.RemoveItem(GHIElectronics.NETMF.Glide.UI.DataGridItem)">
            <summary>
            Removes an item.
            </summary>
            <param name="dataGridItem">dataGridItem</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.DataGrid.RemoveItemAt(System.Int32)">
            <summary>
            Removes an item a specified index.
            </summary>
            <param name="index">index</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.DataGrid.ScrollUp(System.Int32)">
            <summary>
            Scroll the rows up by a specified amount.
            </summary>
            <param name="amount">amount</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.DataGrid.ScrollDown(System.Int32)">
            <summary>
            Scroll the rows down by a specified amount.
            </summary>
            <param name="amount">amount</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.DataGrid.ScrollTo(System.Int32)">
            <summary>
            Scroll the rows to a specified index.
            </summary>
            <param name="index">index</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.DataGrid.SetRowData(System.Int32,System.Object[])">
            <summary>
            Sets new row data.
            </summary>
            <param name="index">index</param>
            <param name="data">Data object array.</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.DataGrid.GetRowData(System.Int32)">
            <summary>
            Gets row data.
            </summary>
            <param name="index">index</param>
            <returns>Data object array.</returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.DataGrid.SetCellData(System.Int32,System.Int32,System.Object)">
            <summary>
            Sets a cell's data.
            </summary>
            <param name="columnIndex">columnIndex</param>
            <param name="rowIndex">rowIndex</param>
            <param name="data">data</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.DataGrid.GetCellData(System.Int32,System.Int32)">
            <summary>
            Get a cell's data.
            </summary>
            <param name="columnIndex">columnIndex</param>
            <param name="rowIndex">rowIndex</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.DataGrid.Sort(System.Int32)">
            <summary>
            Sorts the items on a specified column index.
            </summary>
            <param name="columnIndex"></param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.DataGrid.Clear">
            <summary>
            Clears all items including their data and resets the data grid.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.DataGrid.Font">
            <summary>
            Font used by the text.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.DataGrid.RowHeight">
            <summary>
            Row height.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.DataGrid.TappableCells">
            <summary>
            Indicates whether items trigger cell tap events or not.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.DataGrid.Draggable">
            <summary>
            Indicates whether or not the item list can be dragged up and down.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.DataGrid.SortableHeaders">
            <summary>
            Indicates whether the headers are sortable.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.DataGrid.HeadersBackColor">
            <summary>
            Headers background color.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.DataGrid.HeadersFontColor">
            <summary>
            Headers font color.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.DataGrid.ItemsBackColor">
            <summary>
            Items background color.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.DataGrid.ItemsAltBackColor">
            <summary>
            Items alternate background color.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.DataGrid.ItemsFontColor">
            <summary>
            Items font color.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.DataGrid.SelectedItemBackColor">
            <summary>
            Selected item background color.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.DataGrid.SelectedItemFontColor">
            <summary>
            Selected item font color.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.DataGrid.GridColor">
            <summary>
            Grid color.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.DataGrid.ShowScrollbar">
            <summary>
            Indicates whether the scrollbar is shown.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.DataGrid.ScrollbarWidth">
            <summary>
            Scrollbar width.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.DataGrid.ScrollbarBackColor">
            <summary>
            Scrollbar background color.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.DataGrid.ScrollbarScrubberColor">
            <summary>
            Scrollbar scrubber color.
            </summary>
        </member>
        <member name="E:GHIElectronics.NETMF.Glide.UI.DataGrid.TapCellEvent">
            <summary>
            Tap grid event.
            </summary>
        </member>
        <member name="P:GHIElectronics.NETMF.Glide.UI.DataGrid.RowCount">
            <summary>
            Number of rows displayed.
            </summary>
        </member>
        <member name="P:GHIElectronics.NETMF.Glide.UI.DataGrid.SelectedIndex">
            <summary>
            The currently selected index.
            </summary>
        </member>
        <member name="P:GHIElectronics.NETMF.Glide.UI.DataGrid.NumItems">
            <summary>
            Number of items in the DataGrid.
            </summary>
        </member>
        <member name="P:GHIElectronics.NETMF.Glide.UI.DataGrid.ShowHeaders">
            <summary>
            Indicates whether the headers are shown.
            </summary>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.UI.DataGrid.Order">
            <summary>
            The order in which rows are sorted.
            </summary>
            <remarks>ASC stands for ascending ex: 1 to 10 or A to Z. DESC stands for descending ex: 10 to 1 or Z to A.</remarks>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.DataGrid.Order.ASC">
            <summary>
            Ascending
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.DataGrid.Order.DESC">
            <summary>
            Descending
            </summary>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.UI.Keyboard">
            <summary>
            The Keyboard component is an on-screen keyboard that allows user input.
            </summary>
            <remarks>The Keyboard component should be used in conjunction with a TextBox or PasswordBox. Please see those components for further details.</remarks>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.Keyboard.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new Keyboard.
            </summary>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <param name="numViews">Number of views.</param>
            <param name="keyHeight">Key height.</param>
            <param name="keySpacing">Key spacing.</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.Keyboard.TriggerTapKeyEvent(System.Object,GHIElectronics.NETMF.Glide.TapKeyEventArgs)">
            <summary>
            Triggers a key up event.
            </summary>
            <param name="sender">Object associated with the event.</param>
            <param name="args">Key up event arguments.</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.Keyboard.Render">
            <summary>
            Renders the Keyboard onto it's parent container's graphics.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.Keyboard.DrawKeyDown(System.Int32)">
            <summary>
            Renders and flushes the specified key within the current view.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.Keyboard.Invalidate">
            <summary>
            Renders this display object and flushes it to the screen.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.Keyboard.OnTouchDown(GHIElectronics.NETMF.Glide.TouchEventArgs)">
            <summary>
            Handles the touch down event.
            </summary>
            <param name="e">Touch event arguments.</param>
            <returns>Touch event arguments.</returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.Keyboard.OnTouchUp(GHIElectronics.NETMF.Glide.TouchEventArgs)">
            <summary>
            Handles the touch up event.
            </summary>
            <param name="e">Touch event arguments.</param>
            <returns>Touch event arguments.</returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.Keyboard.Dispose">
            <summary>
            Disposes all disposable objects in this object.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.Keyboard.SetViewKeyContent(GHIElectronics.NETMF.Glide.UI.Keyboard.View,System.String[][])">
            <summary>
            Sets a view's key content.
            </summary>
            <param name="view">KeyboardView</param>
            <param name="keyContent">Array containing the key content.</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.Keyboard.SetViewKeyWidth(GHIElectronics.NETMF.Glide.UI.Keyboard.View,System.Int32[][])">
            <summary>
            Sets a view's key width.
            </summary>
            <param name="view">KeyboardView</param>
            <param name="keyWidth">Array containing the key widths.</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.Keyboard.Start">
            <summary>
            Starts the keyboard.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.Keyboard.Stop">
            <summary>
            Stops the keyboard.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.Keyboard.SetView(GHIElectronics.NETMF.Glide.UI.Keyboard.View)">
            <summary>
            Set the keyboard view.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.Keyboard.CalculateKeys">
            <summary>
            Calculates the space each key occupies using the X and Y offset.
            </summary>
            <remarks>The keys must be centered and spaced exactly the same.</remarks>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.Keyboard.DefaultKeyContent">
            <summary>
            Sets the default key content.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.Keyboard.DefaultKeyWidth">
            <summary>
            Sets the default key width.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.Keyboard.Restricted">
            <summary>
            Restricted characters; the corresponding keys will be disabled.
            </summary>
            <example>
            // Here for example, we restrict invalid file name characters and the Symbols view.
            <code>Glide.Keyboard.Restricted = new string[9] { "\\", "/", ":", "*", "?", "\"", "&lt;", "&gt;", Keyboard.ActionKey.ToSymbols };</code>
            </example>
        </member>
        <member name="E:GHIElectronics.NETMF.Glide.UI.Keyboard.TapKeyEvent">
            <summary>
            A key entered the up state.
            </summary>
        </member>
        <member name="P:GHIElectronics.NETMF.Glide.UI.Keyboard.CurrentView">
            <summary>
            Current view.
            </summary>
        </member>
        <member name="P:GHIElectronics.NETMF.Glide.UI.Keyboard.BitmapUp">
            <summary>
            Bitmaps for each view containing keys in the up position.
            </summary>
        </member>
        <member name="P:GHIElectronics.NETMF.Glide.UI.Keyboard.Uppercase">
            <summary>
            Indicates whether or not the letters are uppercase or lowercase.
            </summary>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.UI.Keyboard.View">
            <summary>
            Keyboard views.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.Keyboard.View.Letters">
            <summary>
            Letters
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.Keyboard.View.Numbers">
            <summary>
            Numbers
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.Keyboard.View.Symbols">
            <summary>
            Symbols
            </summary>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.UI.Keyboard.ActionKey">
            <summary>
            Keys that perform an action.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.Keyboard.ActionKey.ToggleCase">
            <summary>
            Toggle between uppercase and lowercase.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.Keyboard.ActionKey.Backspace">
            <summary>
            Backspace
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.Keyboard.ActionKey.ToNumbers">
            <summary>
            Switches to the Numbers keyboard view.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.Keyboard.ActionKey.ToLetters">
            <summary>
            Switches to the Letters keyboard view.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.Keyboard.ActionKey.ToSymbols">
            <summary>
            Switches to the Symbols keyboard view.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.Keyboard.ActionKey.Space">
            <summary>
            Space
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.Keyboard.ActionKey.Return">
            <summary>
            Return
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.Keyboard.ActionKey.Tab">
            <summary>
            Tab
            </summary>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.GlideLoader">
            <summary>
            The GlideLoader class parses XML into components.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.GlideLoader.LoadWindow(System.String)">
            <summary>
            Loads a Window from an XML string.
            </summary>
            <param name="xmlStr">XML string.</param>
            <returns>Window object.</returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.GlideLoader.LoadWindow(System.Byte[])">
            <summary>
            Loads a Window from XML bytes.
            </summary>
            <param name="xmlBytes">XML bytes.</param>
            <returns>Window object.</returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.GlideLoader.GetComponent(System.Xml.XmlReader)">
            <summary>
            Parses a UI component from the XML.
            </summary>
            <param name="reader">XML reader object.</param>
            <returns>DisplayObject</returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.GlideLoader.ParseWindow(System.Xml.XmlReader)">
            <summary>
            Parses the Window XML into a UI component.
            </summary>
            <param name="reader">XML reader object.</param>
            <returns>Window</returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.GlideLoader.LoadButton(System.Xml.XmlReader)">
            <summary>
            Parses the Button XML into a UI component.
            </summary>
            <param name="reader">XML reader object.</param>
            <returns>Button object.</returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.GlideLoader.LoadCheckBox(System.Xml.XmlReader)">
            <summary>
            Parses the CheckBox XML into a UI component.
            </summary>
            <param name="reader">XML reader object.</param>
            <returns>CheckBox object.</returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.GlideLoader.LoadDropdown(System.Xml.XmlReader)">
            <summary>
            Parses the Dropdown XML into a UI component.
            </summary>
            <param name="reader">XML reader object.</param>
            <returns>Dropdown object.</returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.GlideLoader.LoadDataGrid(System.Xml.XmlReader)">
            <summary>
            Parses the DataGrid XML into a UI component.
            </summary>
            <param name="reader">XML reader object.</param>
            <returns>Datagrid object.</returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.GlideLoader.LoadImage(System.Xml.XmlReader)">
            <summary>
            Parses the Image XML into a UI component.
            </summary>
            <param name="reader">XML reader object.</param>
            <returns>Image object.</returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.GlideLoader.LoadPasswordBox(System.Xml.XmlReader)">
            <summary>
            Parses the PasswordBox XML into a UI component.
            </summary>
            <param name="reader">XML reader object.</param>
            <returns>PasswordBox object.</returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.GlideLoader.LoadProgressBar(System.Xml.XmlReader)">
            <summary>
            Parses the ProgressBar XML into a UI component.
            </summary>
            <param name="reader">XML reader object.</param>
            <returns>ProgressBar object.</returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.GlideLoader.LoadRadioButton(System.Xml.XmlReader)">
            <summary>
            Parses the RadioButton XML into a UI component.
            </summary>
            <param name="reader">XML reader object.</param>
            <returns>RadioButton object.</returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.GlideLoader.LoadSlider(System.Xml.XmlReader)">
            <summary>
            Parses the Slider XML into a UI component.
            </summary>
            <param name="reader">XML reader object.</param>
            <returns>Slider object.</returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.GlideLoader.LoadTextBlock(System.Xml.XmlReader)">
            <summary>
            Parses the TextBlock XML into a UI component.
            </summary>
            <param name="reader">XML reader object.</param>
            <returns>TextBlock object.</returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.GlideLoader.LoadTextBox(System.Xml.XmlReader)">
            <summary>
            Parses the TextBox XML into a UI component.
            </summary>
            <param name="reader">XML reader object.</param>
            <returns>TextBox object.</returns>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.Geom.Point">
            <summary>
            The Point object represents a location in a two-dimensional coordinate system.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.Geom.Point.X">
            <summary>
            The horizontal coordinate of the point.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.Geom.Point.Y">
            <summary>
            The vertical coordinate of the point.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Geom.Point.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new Point.
            </summary>
            <param name="x">X-axis position.</param>
            <param name="y">Y-axis position.</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Geom.Point.ToString">
            <summary>
            Formats the point as a string for debugging.
            </summary>
            <returns>The point as a string. E.g. [100, 100]</returns>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.UI.CheckBox">
            <summary>
            The CheckBox component contains a small box that can be check marked.
            </summary>
            <example>
  Create a new .NET Micro Framework project using the Console Application template and call it "Test".
  Next, open Resources.resx, select Add Resource and click Add New Text File.
  In the prompt, name the new resource "Window" and click Add.
  Now, copy the XML below and paste it into the file and save.
  <code>
    <![CDATA[
<Glide Version="x.x.x">
  <Window Name="window" Width="320" Height="240" BackColor="dce3e7">
    <TextBlock Name="textBlock" X="132" Y="104" Width="120" Height="32" Alpha="255" Text="Remember me" TextAlign="Left" TextVerticalAlign="Middle" Font="4" FontColor="000000"/>
    <CheckBox Name="checkBox" X="92" Y="104" Width="32" Height="32" Alpha="255" Checked="False"/>
  </Window>
</Glide>
  ]]>
  </code>
  Open Program.cs and replace the code with the code below:
  <code>
    <![CDATA[
using System.Threading;

using Microsoft.SPOT;

using GHIElectronics.NETMF.Glide;
using GHIElectronics.NETMF.Glide.Display;
using GHIElectronics.NETMF.Glide.UI;

namespace Test
{
    public class Program
    {
        // This will hold the main window.
        static Window window;

        public static void Main()
        {
            // Load the window
            window = GlideLoader.LoadWindow(Resources.GetString(Resources.StringResources.Window));

            // Activate touch
            GlideTouch.Initialize();

            // Initialize the window.
            InitWin();

            // Assigning a window to MainWindow flushes it to the screen.
            // This also starts event handling on the window.
            Glide.MainWindow = window;

            Thread.Sleep(-1);
        }

        static void InitWin()
        {
            // Get the CheckBox
            CheckBox checkBox = (CheckBox)window.GetChildByName("checkBox");
            checkBox.TapEvent += new OnTap(checkBox_TapEvent);

            // You can also add a TextBlock to control the CheckBox.
            TextBlock textBlock = (TextBlock)window.GetChildByName("textBlock");
            // Simply tell the text block what it's for.
            // (This will also trigger the CheckBox's tap event)
            textBlock.For = checkBox;
        }

        // Handles the tap event.
        static void checkBox_TapEvent(object sender)
        {
            // Get the CheckBox
            CheckBox checkBox = (CheckBox)window.GetChildByName("checkBox");

            // To get the value simply do the following:
            Debug.Print("CheckBox value: " + checkBox.Value.ToString());
        }

    }
}
  ]]>
  </code>
  Before we run it, we must add the Glide reference by right-clicking References and selecting Add Reference.
  In the new window select the Browse tab, locate GHIElectronics.NETMF.Glide and click Ok.
  Now that everything is ready, press F5 to run the example.
</example>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.CheckBox.#ctor(System.String,System.UInt16,System.Int32,System.Int32)">
            <summary>
            Creates a new CheckBox.
            </summary>
            <param name="name">Name</param>
            <param name="alpha">Alpha</param>
            <param name="x">X-axis position.</param>
            <param name="y">Y-axis position.</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.CheckBox.Render">
            <summary>
            Renders the CheckBox onto it's parent container's graphics.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.CheckBox.OnTouchDown(GHIElectronics.NETMF.Glide.TouchEventArgs)">
            <summary>
            Handles the touch down event.
            </summary>
            <param name="e">Touch event arguments.</param>
            <returns>Touch event arguments.</returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.CheckBox.OnTouchUp(GHIElectronics.NETMF.Glide.TouchEventArgs)">
            <summary>
            Handles the touch up event.
            </summary>
            <param name="e">Touch event arguments.</param>
            <returns>Touch event arguments.</returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.CheckBox.Dispose">
            <summary>
            Disposes all disposable objects in this object.
            </summary>
        </member>
        <member name="P:GHIElectronics.NETMF.Glide.UI.CheckBox.Checked">
            <summary>
            Indicates whether or not this checkbox is checked.
            </summary>
            <remarks>Changing this property will trigger an Invalidate.</remarks>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.UI.Canvas">
            <summary>
            The Canvas component provides methods to draw.
            </summary>
            <remarks>
            Everytime you call a draw method on this component it's added to a queue.
            When this component is asked to render by it's parent the queue will be drawn onto it's parent container's graphics.
            This makes it a good choice for drawing organizing shapes such as fieldsets and separator lines.
            </remarks>
            <example>
  Create a new .NET Micro Framework project using the Console Application template and call it "Test".
  Next, open Resources.resx, select Add Resource and click Add New Text File.
  In the prompt, name the new resource "Window" and click Add.
  Now, copy the XML below and paste it into the file and save.
  <code>
    <![CDATA[
<Glide Version="x.x.x">
  <Window Name="window" Width="320" Height="240" BackColor="dce3e7">
    <TextBlock Name="textBlock" X="40" Y="40" Width="50" Height="32" Alpha="255" Text="Login" TextAlign="Right" TextVerticalAlign="Middle" Font="4" FontColor="000000"/>
    <TextBlock Name="emailTxt" X="40" Y="72" Width="75" Height="32" Alpha="255" Text="Email" TextAlign="Right" TextVerticalAlign="Middle" Font="2" FontColor="000000"/>
    <TextBlock Name="passTxt" X="40" Y="109" Width="75" Height="32" Alpha="255" Text="Password" TextAlign="Right" TextVerticalAlign="Middle" Font="2" FontColor="000000"/>
    <TextBox Name="emailTxt" X="125" Y="72" Width="150" Height="32" Alpha="255" Text="" TextAlign="Left" Font="2" FontColor="000000"/>
    <TextBox Name="passTxt" X="125" Y="109" Width="150" Height="32" Alpha="255" Text="" TextAlign="Left" Font="4" FontColor="000000"/>
    <Button Name="loginBtn" X="125" Y="160" Width="150" Height="32" Alpha="255" Text="Login" Font="2" FontColor="000000" DisabledFontColor="808080" TintColor="000000" TintAmount="0"/>
    <TextBlock Name="titleTxt" X="0" Y="0" Width="320" Height="32" Alpha="255" Text="Canvas Example" TextAlign="Center" TextVerticalAlign="Middle" Font="4" FontColor="0000FF"/>
  </Window>
</Glide>
  ]]>
  </code>
  Open Program.cs and replace the code with the code below:
  <code>
    <![CDATA[
using System.Threading;

using GHIElectronics.NETMF.Glide;
using GHIElectronics.NETMF.Glide.Display;
using GHIElectronics.NETMF.Glide.UI;

namespace Test
{
    public class Program
    {
        // This will hold the main window.
        static Window window;

        public static void Main()
        {
            // Load the window
            window = GlideLoader.LoadWindow(Resources.GetString(Resources.StringResources.Window));

            // Activate touch
            GlideTouch.Initialize();

            // Initialize the window.
            InitWin();

            // Assigning a window to MainWindow flushes it to the screen.
            // This also starts event handling on the window.
            Glide.MainWindow = window;

            Thread.Sleep(-1);
        }

        static void InitWin()
        {
            // Create a Canvas
            // The Canvas object has no parameters as it's only used to issue draw commands when rendered.
            Canvas canvas = new Canvas();
            window.AddChild(canvas);

            // Draw a separator line.
            canvas.DrawLine(Colors.Blue, 1, 0, 32, window.Width, 32);

            // Draw a fieldset around our "Login" text block.
            TextBlock textBlock = (TextBlock)window.GetChildByName("textBlock");
            canvas.DrawFieldset(textBlock, 10, 200, 150, Colors.DarkGray, 1);            
        }
    }
}
  ]]>
  </code>
  Before we run it, we must add the Glide reference by right-clicking References and selecting Add Reference.
  In the new window select the Browse tab, locate GHIElectronics.NETMF.Glide and click Ok.
  Now that everything is ready, press F5 to run the example.
</example>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.Canvas.Render">
            <summary>
            Renders all drawing requests onto it's parent container's graphics.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.Canvas.DrawEllipse(Microsoft.SPOT.Presentation.Media.Color,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a draw ellipse request.
            </summary>
            <param name="color">Color</param>
            <param name="x">X</param>
            <param name="y">Y</param>
            <param name="xRadius">X Radius</param>
            <param name="yRadius">Y Radius</param>
            <returns>Index of request.</returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.Canvas.DrawImage(System.Int32,System.Int32,Microsoft.SPOT.Bitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt16)">
            <summary>
            Adds a draw image request.
            </summary>
            <param name="xDst">X</param>
            <param name="yDst">Y</param>
            <param name="bitmap">Bitmap</param>
            <param name="xSrc">Bitmap X offset.</param>
            <param name="ySrc">Bitmap Y offset.</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <param name="opacity">Opacity</param>
            <returns>Index of request.</returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.Canvas.DrawLine(Microsoft.SPOT.Presentation.Media.Color,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a draw line request.
            </summary>
            <param name="color">Color</param>
            <param name="thickness">Thickness</param>
            <param name="x0">Start X</param>
            <param name="y0">Start Y</param>
            <param name="x1">End X</param>
            <param name="y1">End Y</param>
            <returns>Index of request.</returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.Canvas.DrawRectangle(Microsoft.SPOT.Presentation.Media.Color,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.SPOT.Presentation.Media.Color,System.Int32,System.Int32,Microsoft.SPOT.Presentation.Media.Color,System.Int32,System.Int32,System.UInt16)">
            <summary>
            Adds a draw rectangle request.
            </summary>
            <param name="colorOutline">Color outline.</param>
            <param name="thicknessOutline">Thickness outline.</param>
            <param name="x">X</param>
            <param name="y">Y</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <param name="xCornerRadius">X corder radius.</param>
            <param name="yCornerRadius">Y corder radius.</param>
            <param name="colorGradientStart">Color gradient start.</param>
            <param name="xGradientStart">X gradient start.</param>
            <param name="yGradientStart">Y gradient start.</param>
            <param name="colorGradientEnd">Color gradient end.</param>
            <param name="xGradientEnd">X gradient end.</param>
            <param name="yGradientEnd">Y gradient end.</param>
            <param name="opacity">Opacity</param>
            <returns>Index of request.</returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.Canvas.DrawFieldset(GHIElectronics.NETMF.Glide.UI.TextBlock,System.Int32,System.Int32,System.Int32,Microsoft.SPOT.Presentation.Media.Color,System.Int32)">
            <summary>
            Draws a fieldset around a Label component.
            </summary>
            <param name="textBlock">TextBlock component.</param>
            <param name="leftMargin">Left margin from label.</param>
            <param name="rightMargin">Right margin from label.</param>
            <param name="height">Height</param>
            <param name="borderColor">Border color.</param>
            <param name="borderThickness">Border thickness.</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.Canvas.Clear">
            <summary>
            Clears all drawing requests.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.Canvas.ClearAt(System.Int32)">
            <summary>
            Clear a drawing request at a specified index.
            </summary>
            <param name="index">Index to be cleared.</param>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.UI.DataGridItemComparer">
            <summary>
            The DataGridItemComparer class allows comparison between DataGridItems.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.DataGridItemComparer.Compare(System.Object,System.Object)">
            <summary>
            Compare two DataGridRow objects.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="P:GHIElectronics.NETMF.Glide.UI.DataGridItemComparer.ColumnIndex">
            <summary>
            Column index to compare.
            </summary>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.Steps">
            <summary>
            Holds the steps for different animations.
            </summary>
        </member>
        <member name="P:GHIElectronics.NETMF.Glide.Steps.SlideWindow">
            <summary>
            Steps to slide between windows.
            </summary>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.Tween">
            <summary>
            The Tween class gives you access to methods that move, resize, and fade objects over a number of steps.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.Tween.NumSteps">
            <summary>
            Indicates the number of steps an animation needs to tween from start to finish.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Tween.#cctor">
            <summary>
            Initializes the Tween class.
            </summary>
            <remarks>Sets the best number of steps to tween from start to finish based on your GHI Electronics board model.</remarks>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Tween.GetSteps(System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates a position for each step.
            </summary>
            <param name="start">Start position.</param>
            <param name="end">End position.</param>
            <param name="steps">Number of steps.</param>
            <returns>An array of steps to move from start to end.</returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Tween.SlideWindow(GHIElectronics.NETMF.Glide.Display.Window,GHIElectronics.NETMF.Glide.Display.Window,GHIElectronics.NETMF.Glide.Direction)">
            <summary>
            Slides between windows in a specified direction.
            </summary>
            <param name="fromWindow">From window.</param>
            <param name="toWindow">To window.</param>
            <param name="direction">Direction of movement.</param>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.OnTap">
            <summary>
            Tap event handler.
            </summary>
            <param name="sender">Object associated with the event.</param>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.OnTapOption">
            <summary>
            Tap option event handler.
            </summary>
            <param name="sender">Object associated with the event.</param>
            <param name="args">Tap option event arguments.</param>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.OnTapCell">
            <summary>
            Tap cell event handler.
            </summary>
            <param name="sender">Object associated with this event.</param>
            <param name="args">Tap cell event arguments.</param>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.OnTapKey">
            <summary>
            Tap key event handler.
            </summary>
            <param name="sender">Object associated with the event.</param>
            <param name="args">Tap key event arguments.</param>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.OnValueChanged">
            <summary>
            Value changed event handler.
            </summary>
            <param name="sender">Object associated with the event.</param>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.OnClose">
            <summary>
            Close event handler.
            </summary>
            <param name="sender">Object associated with the event.</param>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.OnPress">
            <summary>
            Press event handler.
            </summary>
            <param name="sender">Object associated with the event.</param>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.OnRelease">
            <summary>
            Release event handler.
            </summary>
            <param name="sender">Object associated with the event.</param>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.OnRendered">
            <summary>
            Rendered event handler.
            </summary>
            <param name="sender">Object associated with the event.</param>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.OnGesture">
            <summary>
            Gesture event handler.
            </summary>
            <param name="sender">Object associated with the event.</param>
            <param name="args">Touch gesture event arguments.</param>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.TapOptionEventArgs">
            <summary>
            Tap option event arguments.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.TapOptionEventArgs.Index">
            <summary>
            Index
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.TapOptionEventArgs.Label">
            <summary>
            Label
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.TapOptionEventArgs.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.TapOptionEventArgs.#ctor(System.Int32,System.String,System.Object)">
            <summary>
            Creates a new TapOptionEventArgs.
            </summary>
            <param name="index">Option index.</param>
            <param name="label">Option label.</param>
            <param name="value">Option value.</param>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.TapCellEventArgs">
            <summary>
            Tap cell event arguments.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.TapCellEventArgs.ColumnIndex">
            <summary>
            Column index.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.TapCellEventArgs.RowIndex">
            <summary>
            Row index.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.TapCellEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new TapCellEventArgs.
            </summary>
            <param name="columnIndex">X coordinate</param>
            <param name="rowIndex">Y coordinate</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.TapCellEventArgs.ToString">
            <summary>
            ToString
            </summary>
            <returns>Tap cell event properties.</returns>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.TapKeyEventArgs">
            <summary>
            Tap key event arguments.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.TapKeyEventArgs.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.TapKeyEventArgs.Index">
            <summary>
            Index
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.TapKeyEventArgs.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new KeyUpEventArgs.
            </summary>
            <param name="value">Character the key represents.</param>
            <param name="index">Key index within current view.</param>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.UI.List">
            <summary>
            The list component provides a list of options.
            </summary>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.Display.DisplayObjectContainer">
            <summary>
            The DisplayObjectContainer class is the base class for all objects that can serve as display object containers on the display list.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Display.DisplayObjectContainer.Render">
            <summary>
            Renders all children onto this container's graphics.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Display.DisplayObjectContainer.OnTouchDown(GHIElectronics.NETMF.Glide.TouchEventArgs)">
            <summary>
            Passes touch down events to the children.
            </summary>
            <param name="e">Touch event arguments.</param>
            <returns>Touch event arguments.</returns>
            <remarks>Events are passed to the children in descending order (from the last child added to the first).</remarks>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Display.DisplayObjectContainer.OnTouchUp(GHIElectronics.NETMF.Glide.TouchEventArgs)">
            <summary>
            Passes touch up events to the children.
            </summary>
            <param name="e">Touch event arguments.</param>
            <returns>Touch event arguments.</returns>
            <remarks>Events are passed to the children in descending order (from the last child added to the first).</remarks>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Display.DisplayObjectContainer.OnTouchMove(GHIElectronics.NETMF.Glide.TouchEventArgs)">
            <summary>
            Passes touch move events to the children.
            </summary>
            <param name="e">Touch event arguments.</param>
            <returns>Touch event arguments.</returns>
            <remarks>Events are passed to the children in descending order (from the last child added to the first).</remarks>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Display.DisplayObjectContainer.OnTouchGesture(GHIElectronics.NETMF.Glide.TouchGestureEventArgs)">
            <summary>
            Passes touch gesture events to the children.
            </summary>
            <param name="e">Touch event arguments.</param>
            <returns>Touch event arguments.</returns>
            <remarks>Events are passed to the children in descending order (from the last child added to the first).</remarks>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Display.DisplayObjectContainer.Dispose">
            <summary>
            Disposes this container and all it's children.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Display.DisplayObjectContainer.Contains(GHIElectronics.NETMF.Glide.Display.DisplayObject)">
            <summary>
            Returns whether this container contains a child DisplayObject.
            </summary>
            <param name="child">DisplayObject to find.</param>
            <returns></returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Display.DisplayObjectContainer.AddChild(GHIElectronics.NETMF.Glide.Display.DisplayObject)">
            <summary>
            Adds a child DisplayObject to this DisplayObjectContainer.
            </summary>
            <param name="child">DisplayObject to add.</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Display.DisplayObjectContainer.AddChildAt(System.Int32,GHIElectronics.NETMF.Glide.Display.DisplayObject)">
            <summary>
            Adds a child DisplayObject to this DisplayObjectContainer at a specific index.
            </summary>
            <param name="index"></param>
            <param name="child"></param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Display.DisplayObjectContainer.RemoveChild(GHIElectronics.NETMF.Glide.Display.DisplayObject)">
            <summary>
            Removes the specified child DisplayObject from this DisplayObjectContainer.
            </summary>
            <param name="child">DisplayObject to remove.</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Display.DisplayObjectContainer.RemoveChildAt(System.Int32)">
            <summary>
            Removes the specified child DisplayObject from this DisplayObjectContainer at a specific index.
            </summary>
            <param name="index">Index of a DisplayObject.</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Display.DisplayObjectContainer.GetChildByName(System.String)">
            <summary>
            Returns a DisplayObject with the specified name.
            </summary>
            <param name="name">Name</param>
            <returns></returns>
        </member>
        <member name="P:GHIElectronics.NETMF.Glide.Display.DisplayObjectContainer.Item(System.Int32)">
            <summary>
            Returns a child DisplayObject by index.
            </summary>
            <param name="index">Index of a DisplayObject.</param>
            <returns></returns>
        </member>
        <member name="P:GHIElectronics.NETMF.Glide.Display.DisplayObjectContainer.Graphics">
            <summary>
            Graphics specifies an object that belongs to this container where drawing commands can occur.
            </summary>
        </member>
        <member name="P:GHIElectronics.NETMF.Glide.Display.DisplayObjectContainer.NumChildren">
            <summary>
            Returns the number of children of this object.
            </summary>
        </member>
        <member name="P:GHIElectronics.NETMF.Glide.Display.DisplayObjectContainer.AutoHeight">
            <summary>
            Indicates whether or not the container should automatically resize it's height.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.List.#ctor(System.Collections.ArrayList,System.Int32)">
            <summary>
            Creates a new List component.
            </summary>
            <param name="options">Array of options.</param>
            <param name="width">Width</param>
            <remarks>The list cannot be smaller than 100 or greater than the LCD size. We recommend keeping the size to a minimum; only use what you need.</remarks>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.List.TriggerTapOptionEvent(System.Object,GHIElectronics.NETMF.Glide.TapOptionEventArgs)">
            <summary>
            Triggers a tap option event.
            </summary>
            <param name="sender">Object associated with the event.</param>
            <param name="args">Tap option event arguments.</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.List.TriggerCloseEvent(System.Object)">
            <summary>
            Triggers a close event.
            </summary>
            <param name="sender">Object associated with the event.</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.List.Render">
            <summary>
            Renders the List onto it's parent container's graphics.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.List.OnTouchDown(GHIElectronics.NETMF.Glide.TouchEventArgs)">
            <summary>
            Handles the touch down event.
            </summary>
            <param name="e">Touch event arguments.</param>
            <returns>Touch event arguments.</returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.List.OnTouchUp(GHIElectronics.NETMF.Glide.TouchEventArgs)">
            <summary>
            Handles the touch up event.
            </summary>
            <param name="e">Touch event arguments.</param>
            <returns>Touch event arguments.</returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.List.OnTouchMove(GHIElectronics.NETMF.Glide.TouchEventArgs)">
            <summary>
            Handles the touch move event.
            </summary>
            <param name="e">Touch event arguments.</param>
            <returns>Touch event arguments.</returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.List.Dispose">
            <summary>
            Disposes all disposable objects in this object.
            </summary>
        </member>
        <member name="E:GHIElectronics.NETMF.Glide.UI.List.TapOptionEvent">
            <summary>
            Tap option event.
            </summary>
        </member>
        <member name="E:GHIElectronics.NETMF.Glide.UI.List.CloseEvent">
            <summary>
            Close event.
            </summary>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.FontManager">
            <summary>
            Manages font-related functionality.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.FontManager.GetFont(GHIElectronics.NETMF.Glide.FontManager.FontType)">
            <summary>
            Returns a font resource specified by a font type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.FontManager.GetRect(Microsoft.SPOT.Font,System.String)">
            <summary>
            Returns a Rectangle object the same size of a string.
            </summary>
            <param name="font"></param>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.FontManager.GetSize(Microsoft.SPOT.Font,System.String)">
            <summary>
            Returns the size of a string.
            </summary>
            <param name="font"></param>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.FontManager.FontType">
            <summary>
            Different types of fonts/sizes.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.FontManager.FontType.droid_reg08">
            <summary>
            Droid Sans Regular 8
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.FontManager.FontType.droid_reg09">
            <summary>
            Droid Sans Regular 9
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.FontManager.FontType.droid_reg10">
            <summary>
            Droid Sans Regular 10
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.FontManager.FontType.droid_reg11">
            <summary>
            Droid Sans Regular 11
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.FontManager.FontType.droid_reg12">
            <summary>
            Droid Sans Regular 12
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.FontManager.FontType.droid_reg14">
            <summary>
            Droid Sans Regular 14
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.FontManager.FontType.droid_reg18">
            <summary>
            Droid Sans Regular 18
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.FontManager.FontType.droid_reg24">
            <summary>
            Droid Sans Regular 24
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.FontManager.FontType.droid_reg32">
            <summary>
            Droid Sans Regular 32
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.FontManager.FontType.droid_reg48">
            <summary>
            Droid Sans Regular 48
            </summary>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.Display.CalibrationWindow">
            <summary>
            The CalibrationWindow allows you to easily calibrate your touchscreen.
            </summary>
            <example>
  Create a new .NET Micro Framework project using the Console Application template and call it "Test".
  Next, open Resources.resx, select Add Resource and click Add New Text File.
  In the prompt, name the new resource "Window" and click Add.
  Now, copy the XML below and paste it into the file and save.
  <code>
    <![CDATA[
<Glide Version="x.x.x">
  <Window Name="window" Width="320" Height="240" BackColor="dce3e7">
    <Button Name="btn" X="20" Y="20" Width="80" Height="32" Alpha="255" Text="Calibrate" Font="3" FontColor="000000" DisabledFontColor="808080" TintColor="000000" TintAmount="0"/>
  </Window>
</Glide>
  ]]>
  </code>
  Open Program.cs and replace the code with the code below:
  <code>
    <![CDATA[
using System.Threading;

using GHIElectronics.NETMF.Glide;
using GHIElectronics.NETMF.Glide.Display;
using GHIElectronics.NETMF.Glide.UI;

namespace Test
{
    public class Program
    {
        // The windows.
        static Window window;
        static CalibrationWindow calWindow;

        public static void Main()
        {
            // Load the window
            window = GlideLoader.LoadWindow(Resources.GetString(Resources.StringResources.Window));

            // Activate touch
            GlideTouch.Initialize();

            // Initialize the windows.
            InitWin();
            InitCalWin();

            // Assigning a window to MainWindow flushes it to the screen.
            // This also starts event handling on the window.
            Glide.MainWindow = window;

            Thread.Sleep(-1);
        }

        static void InitWin()
        {
            Button btn = (Button)window.GetChildByName("btn");

            // Open the calibration window.
            btn.TapEvent += new OnTap(btn_TapEvent);
        }

        static void btn_TapEvent(object sender)
        {
            // Switch to calibration window.
            Glide.MainWindow = calWindow;
        }

        static void InitCalWin()
        {
            // 1st argument is auto start, which immediately starts calibration once the window is open.
            // 2nd argument is auto save, which saves the calibration settings for future restarts.
            calWindow = new CalibrationWindow(false, false);

            // Close the calibration window.
            calWindow.CloseEvent += new OnClose(calWindow_CloseEvent);
        }

        static void calWindow_CloseEvent(object sender)
        {
            // Switch to normal window.
            Glide.MainWindow = window;
        }
    }
}
  ]]>
  </code>
  Before we run it, we must add the Glide reference by right-clicking References and selecting Add Reference.
  In the new window select the Browse tab, locate GHIElectronics.NETMF.Glide and click Ok.
  Now that everything is ready, press F5 to run the example.
</example>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.Display.Window">
            <summary>
            The Window class inherits from: DisplayObjectContainer, DisplayObject
            </summary>
            <remarks>The Window represents a single screen within an application.</remarks>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Display.Window.#ctor">
            <summary>
            Creates a new Window.
            </summary>
            <remarks>If you're using this empty constructor (to extend for example), you'll need to initialize the window's graphics object yourself. <code>myWindow.Graphics = new Graphics(width, height);</code></remarks>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Display.Window.TriggerOnRenderedEvent(System.Object)">
            <summary>
            Triggers a rendered event.
            </summary>
            <param name="sender">Object associated with the event.</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Display.Window.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a new Window.
            </summary>
            <param name="name">Name of the Window.</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Display.Window.TriggerCloseEvent(System.Object)">
            <summary>
            Triggers a close event.
            </summary>
            <param name="sender">Object associated with the event.</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Display.Window.HandleEvents">
            <summary>
            Tells this window to handle touch events.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Display.Window.IgnoreEvents">
            <summary>
            Tells this window to ignore touch events.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Display.Window.Render">
            <summary>
            Draws this window and it's children on it's graphics.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Display.Window.Invalidate">
            <summary>
            Renders the window and flushes it to the screen.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Display.Window.Dispose">
            <summary>
            Disposes this container and all it's children.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Display.Window.TouchDownEvent(System.Object,GHIElectronics.NETMF.Glide.TouchEventArgs)">
            <summary>
            Pass touch down events to the children.
            </summary>
            <param name="sender">Object associated with the event.</param>
            <param name="e">Touch event arguments.</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Display.Window.TouchUpEvent(System.Object,GHIElectronics.NETMF.Glide.TouchEventArgs)">
            <summary>
            Pass touch up events to the children.
            </summary>
            <param name="sender">Object associated with the event.</param>
            <param name="e">Touch event arguments.</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Display.Window.TouchMoveEvent(System.Object,GHIElectronics.NETMF.Glide.TouchEventArgs)">
            <summary>
            Pass touch move events to the children.
            </summary>
            <param name="sender">Object associated with the event.</param>
            <param name="e">Touch event arguments.</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Display.Window.TouchGestureEvent(System.Object,GHIElectronics.NETMF.Glide.TouchGestureEventArgs)">
            <summary>
            Pass touch gesture events to the children.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Display.Window.FillRect(GHIElectronics.NETMF.Glide.Geom.Rectangle)">
            <summary>
            Fills a rectangle on this window's graphics using it's background image (if it exists) or the background color.
            </summary>
            <param name="rect">Rectangle object.</param>
        </member>
        <member name="E:GHIElectronics.NETMF.Glide.Display.Window.RenderedEvent">
            <summary>
            Value changed event.
            </summary>
        </member>
        <member name="E:GHIElectronics.NETMF.Glide.Display.Window.CloseEvent">
            <summary>
            Close event.
            </summary>
        </member>
        <member name="P:GHIElectronics.NETMF.Glide.Display.Window.BackColor">
            <summary>
            Background color.
            </summary>
        </member>
        <member name="P:GHIElectronics.NETMF.Glide.Display.Window.BackImage">
            <summary>
            Background image.
            </summary>
        </member>
        <member name="P:GHIElectronics.NETMF.Glide.Display.Window.ListY">
            <summary>
            List Y-axis position.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Display.CalibrationWindow.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Creates a new CalibrationWindow.
            </summary>
            <param name="autoStart">Whether or not to automatically begin calibration.</param>
            <param name="autoSave">Whether or not to save the calibration settings using Extended Weak Reference.</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Display.CalibrationWindow.OnTouchUp(GHIElectronics.NETMF.Glide.TouchEventArgs)">
            <summary>
            Handles the touch up event.
            </summary>
            <param name="e">Touch event arguments.</param>
            <returns>Touch event arguments.</returns>
        </member>
        <member name="P:GHIElectronics.NETMF.Glide.Display.CalibrationWindow.Settings">
            <summary>
            Calibration settings.
            </summary>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.UI.PasswordBox">
            <summary>
            The PasswordBox component allows text input without revealing the text.
            </summary>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.UI.InputBox">
            <summary>
            The InputBox is the base class for TextBox and PasswordBox.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.InputBox.TriggerValueChangedEvent(System.Object)">
            <summary>
            Triggers a value changed event.
            </summary>
            <param name="sender">Object associated with the event.</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.InputBox.OnTouchDown(GHIElectronics.NETMF.Glide.TouchEventArgs)">
            <summary>
            Handles the touch down event.
            </summary>
            <param name="e">Touch event arguments.</param>
            <returns>Touch event arguments.</returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.InputBox.OnTouchUp(GHIElectronics.NETMF.Glide.TouchEventArgs)">
            <summary>
            Handles the touch up event.
            </summary>
            <param name="e">Touch event arguments.</param>
            <returns>Touch event arguments.</returns>
        </member>
        <member name="E:GHIElectronics.NETMF.Glide.UI.InputBox.ValueChangedEvent">
            <summary>
            Value changed event.
            </summary>
        </member>
        <member name="P:GHIElectronics.NETMF.Glide.UI.InputBox.Text">
            <summary>
            A string containing the text.
            </summary>
        </member>
        <member name="P:GHIElectronics.NETMF.Glide.UI.InputBox.TextAlign">
            <summary>
            Indicates the text alignment.
            </summary>
        </member>
        <member name="P:GHIElectronics.NETMF.Glide.UI.InputBox.Font">
            <summary>
            Font used by the text.
            </summary>
        </member>
        <member name="P:GHIElectronics.NETMF.Glide.UI.InputBox.FontColor">
            <summary>
            Indicates the font color.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.PasswordBox.#ctor(System.String,System.UInt16,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new PasswordBox.
            </summary>
            <param name="name">Name</param>
            <param name="alpha">Alpha</param>
            <param name="x">X-axis position.</param>
            <param name="y">Y-axis position.</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.PasswordBox.Render">
            <summary>
            Renders the PasswordBox onto it's parent container's graphics.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.PasswordBox.Dispose">
            <summary>
            Disposes all disposable objects in this object.
            </summary>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.Glide">
            <summary>
            The Glide class provides core functionality.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Glide.OpenKeyboard(System.Object)">
            <summary>
            Opens the keyboard.
            </summary>
            <param name="sender">Object associated with the event.</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Glide.CloseKeyboard">
            <summary>
            Closes the keyboard.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Glide.OpenList(System.Object,GHIElectronics.NETMF.Glide.UI.List)">
            <summary>
            Opens a List component.
            </summary>
            <param name="sender">Object associated with the event.</param>
            <param name="list">List component that needs to be opened.</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Glide.CloseList">
            <summary>
            Closes a List component.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Glide.Flush(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Flushes specified area to the screen.
            </summary>
            <param name="x">X-axis position.</param>
            <param name="y">Y-axis position.</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Glide.Flush(GHIElectronics.NETMF.Glide.Display.DisplayObject)">
            <summary>
            Flushes the rectangular area the DisplayObject occupies to the screen.
            </summary>
            <param name="displayObject">DisplayObject</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Glide.Flush(GHIElectronics.NETMF.Glide.Geom.Rectangle)">
            <summary>
            Flushes the rectangular area to the screen.
            </summary>
            <param name="rect">Rectangle</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Glide.DefaultKeyboard">
            <summary>
            Returns a keyboard used by 320x240 LCDs.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.Glide.Version">
            <summary>
            Glide's version number.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.Glide.LCD">
            <summary>
            Contains the LCD resolution.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.Glide.IsEmulator">
            <summary>
            Indicates whether or not we're using the emulator.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.Glide.FitToScreen">
            <summary>
            Indicates whether or not to resize windows to the LCD's resolution.
            </summary>
            <remarks>This does not affect component placement. They will remain in their assigned position.</remarks>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.Glide.MessageBoxManager">
            <summary>
            A message box that helps inform and instruct the user.
            </summary>
        </member>
        <member name="P:GHIElectronics.NETMF.Glide.Glide.Keyboard">
            <summary>
            Current Keyboard used by Glide.
            </summary>
        </member>
        <member name="P:GHIElectronics.NETMF.Glide.Glide.MainWindow">
            <summary>
            The window currently in focus.
            </summary>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.TouchEventArgs">
            <summary>
            Touch event arguments.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.TouchEventArgs.Propagate">
            <summary>
            Indicates whether or not to continue processing the event.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.TouchEventArgs.Point">
            <summary>
            The point of contact.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.TouchEventArgs.#ctor(Microsoft.SPOT.Touch.TouchInput[])">
            <summary>
            Creates a new TouchEventArgs.
            </summary>
            <param name="Touches">TouchInput</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.TouchEventArgs.#ctor(GHIElectronics.NETMF.Glide.Geom.Point)">
            <summary>
            Creates a new TouchEventArgs.
            </summary>
            <param name="point">Point</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.TouchEventArgs.StopPropagation">
            <summary>
            Stops propagation.
            </summary>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.TouchGesture">
            <summary>
            The TouchGesture class defines gestures.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.TouchGesture.NoGesture">
            <summary>
            No Gesture
            </summary>
            <remarks>Can be used to represent an error gesture or unknown gesture.</remarks>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.TouchGesture.Begin">
            <summary>
            Begin
            </summary>
            <remarks>Used to identify the beginning of a Gesture Sequence; App can use this to highlight UIElement or some other sort of notification.</remarks>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.TouchGesture.End">
            <summary>
            End
            </summary>
            <remarks>Used to identify the end of a gesture sequence; Fired when last finger involved in a gesture is removed.</remarks>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.TouchGesture.Right">
            <summary>
            Right
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.TouchGesture.UpRight">
            <summary>
            Up Right
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.TouchGesture.Up">
            <summary>
            Up
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.TouchGesture.UpLeft">
            <summary>
             Up Left
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.TouchGesture.Left">
            <summary>
            Left
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.TouchGesture.DownLeft">
            <summary>
            Down Left
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.TouchGesture.Down">
            <summary>
            Down
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.TouchGesture.DownRight">
            <summary>
            Down Right
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.TouchGesture.Tap">
            <summary>
            Tap
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.TouchGesture.DoubleTap">
            <summary>
            Double Tap
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.TouchGesture.Zoom">
            <summary>
            Zoom
            </summary>
            <remarks>Equivalent to your "Pinch" gesture.</remarks>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.TouchGesture.Pan">
            <summary>
            Pan
            </summary>
            <remarks>Equivalent to your "Scroll" gesture.</remarks>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.TouchGesture.Rotate">
            <summary>
            Rotate
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.TouchGesture.TwoFingerTap">
            <summary>
            Two finger tap.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.TouchGesture.Rollover">
            <summary>
            Rollover
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.TouchGesture.UserDefined">
            <summary>
            Undefined
            </summary>
            <remarks>Additional touch gestures.</remarks>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.TouchGestureEventArgs">
            <summary>
            Touch gesture event arguments.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.TouchGestureEventArgs.Propagate">
            <summary>
            Indicates whether or not to continue processing the event.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.TouchGestureEventArgs.Timestamp">
            <summary>
            Time the event occured.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.TouchGestureEventArgs.X">
            <summary>
            X coordinate.
            </summary>
            <remarks>The X forms the center location of the gesture for multi-touch or the starting location for single touch.</remarks>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.TouchGestureEventArgs.Y">
            <summary>
            Y coordinate.
            </summary>
            <remarks>The Y forms the center location of the gesture for multi-touch or the starting location for single touch.</remarks>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.TouchGestureEventArgs.Gesture">
            <summary>
            Indicates the gesture.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.TouchGestureEventArgs.Arguments">
            <summary>
            Touch gesture arguments.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.TouchGestureEventArgs.#ctor(GHIElectronics.NETMF.Glide.TouchGesture,System.Int32,System.Int32,System.UInt16,System.DateTime)">
            <summary>
            Creates a new TouchGestureEventArgs.
            </summary>
            <param name="gesture">Touch gesture.</param>
            <param name="x">X-axis position.</param>
            <param name="y">Y-axis position.</param>
            <param name="arguments">Touch gesture arguments.</param>
            <param name="timestamp">Time the event occured.</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.TouchGestureEventArgs.StopPropagation">
            <summary>
            Stops propagation.
            </summary>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.TouchEventHandler">
            <summary>
            Touch event handler.
            </summary>
            <param name="sender">Object associated with the event.</param>
            <param name="e">Touch event arguments.</param>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.TouchGestureEventHandler">
            <summary>
            Touch gesture event handler.
            </summary>
            <param name="sender">Object associated with the event.</param>
            <param name="e">Touch event arguments.</param>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.GlideTouch">
            <summary>
            The GlideTouch class handles all touch functionality.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.GlideTouch.TouchX">
            <summary>
            X-axis of the last touch point.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.GlideTouch.TouchY">
            <summary>
            Y-axis of the last touch point.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.GlideTouch.IgnoreAllEvents">
            <summary>
            Indicates whether all touch events are ignored or not.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.GlideTouch.Initialize">
            <summary>
            Initializes the touch panel.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.GlideTouch.RaiseTouchDownEvent(System.Object,GHIElectronics.NETMF.Glide.TouchEventArgs)">
            <summary>
            Raises a touch down event.
            </summary>
            <param name="sender">Object associated with the event.</param>
            <param name="e">Touch event arguments.</param>
            <remarks>
            Raises a touch down event. This event is handled by the Window currently assigned to Glide.MainWindow.
            Once this Window receives a touch down event, it's passed on to it's children.
            The first child to handle the event stops propagation to the remaining children.
            </remarks>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.GlideTouch.RaiseTouchUpEvent(System.Object,GHIElectronics.NETMF.Glide.TouchEventArgs)">
            <summary>
            Raises a touch up event.
            </summary>
            <param name="sender">Object associated with the event.</param>
            <param name="e">Touch event arguments.</param>
            <remarks>
            Raises a touch up event. This event is handled by the Window currently assigned to Glide.MainWindow.
            Once this Window receives a touch up event, it's passed on to it's children.
            The first child to handle the event stops propagation to the remaining children.
            </remarks>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.GlideTouch.RaiseTouchMoveEvent(System.Object,GHIElectronics.NETMF.Glide.TouchEventArgs)">
            <summary>
            Raises a touch move event.
            </summary>
            <param name="sender">Object associated with the event.</param>
            <param name="e">Touch event arguments.</param>
            <remarks>
            Raises a touch move event. This event is handled by the Window currently assigned to Glide.MainWindow.
            Once this Window receives a touch move event, it's passed on to it's children.
            The first child to handle the event stops propagation to the remaining children.
            </remarks>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.GlideTouch.RaiseTouchGestureEvent(System.Object,GHIElectronics.NETMF.Glide.TouchGestureEventArgs)">
            <summary>
            Raises a touch gesture event.
            </summary>
            <param name="sender">Object associated with the event.</param>
            <param name="e">Touch event arguments.</param>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.GlideTouch.CalSettings">
            <summary>
            Current calibration settings if set othwerwise null.
            </summary>
        </member>
        <member name="E:GHIElectronics.NETMF.Glide.GlideTouch.TouchDownEvent">
            <summary>
            Touch down event handler.
            </summary>
        </member>
        <member name="E:GHIElectronics.NETMF.Glide.GlideTouch.TouchUpEvent">
            <summary>
            Touch up event handler.
            </summary>
        </member>
        <member name="E:GHIElectronics.NETMF.Glide.GlideTouch.TouchMoveEvent">
            <summary>
            Touch move event handler.
            </summary>
        </member>
        <member name="E:GHIElectronics.NETMF.Glide.GlideTouch.TouchGestureEvent">
            <summary>
            Touch gesture event handler.
            </summary>
        </member>
        <member name="P:GHIElectronics.NETMF.Glide.GlideTouch.Calibrated">
            <summary>
            Indicates whether or not the panel has been calibrated.
            </summary>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.CalibrationSettings">
            <summary>
            Calibration Settings
            </summary>
        </member>
        <member name="P:GHIElectronics.NETMF.Glide.CalibrationSettings.Points">
            <summary>
            Calibration Points
            </summary>
        </member>
        <member name="P:GHIElectronics.NETMF.Glide.CalibrationSettings.SX">
            <summary>
            Screen X Buffer
            </summary>
        </member>
        <member name="P:GHIElectronics.NETMF.Glide.CalibrationSettings.SY">
            <summary>
            Screen Y Buffer
            </summary>
        </member>
        <member name="P:GHIElectronics.NETMF.Glide.CalibrationSettings.CX">
            <summary>
            Uncalibrated X Buffer
            </summary>
        </member>
        <member name="P:GHIElectronics.NETMF.Glide.CalibrationSettings.CY">
            <summary>
            Uncalibrated Y Buffer
            </summary>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.UI.MessageBox">
            <summary>
            The MessageBox component displays a box of text to instruct and inform the user.
            </summary>
            <example>
  Create a new .NET Micro Framework project using the Console Application template and call it "Test".
  Next, open Resources.resx, select Add Resource and click Add New Text File.
  In the prompt, name the new resource "Window" and click Add.
  Now, copy the XML below and paste it into the file and save.
  <code>
    <![CDATA[
<Glide Version="x.x.x">
  <Window Name="window" Width="320" Height="240" BackColor="dce3e7">
  </Window>
</Glide>
  ]]>
  </code>
  Glide provides a built-in MessageBox manager. To see it action, open Program.cs and replace the code with the code below:
  <code>
    <![CDATA[
using System;
using System.Threading;

using Microsoft.SPOT;

using GHIElectronics.NETMF.Glide;
using GHIElectronics.NETMF.Glide.Display;
using GHIElectronics.NETMF.Glide.UI;

namespace Test
{
    public class Program
    {
        // This will hold the main window.
        static Window window;

        public static void Main()
        {
            // Load the window
            window = GlideLoader.LoadWindow(Resources.GetString(Resources.StringResources.Window));

            // Activate touch
            GlideTouch.Initialize();

            // Assigning a window to MainWindow flushes it to the screen.
            // This also starts event handling on the window.
            Glide.MainWindow = window;

            // NOTE: Opening a MessageBox causes your application to pause until a response is given.
            // This will show a MessageBox with an Ok button.
            Glide.MessageBoxManager.Show("I am the simplest message box.");

            // Slight wait between boxes (so you can see the change).
            Thread.Sleep(1);

            // This will do the same; except it has a title.
            Glide.MessageBoxManager.Show("I have a title.", "Look at me...");

            Thread.Sleep(1);

            // This prompts the user for input.
            ModalResult result = Glide.MessageBoxManager.Show("Do you like message boxes?", "Just curious...", ModalButtons.YesNo);

            Thread.Sleep(1);

            if (result == ModalResult.Yes)
                Glide.MessageBoxManager.Show("I like you too.", "Yay!");
            else
                Glide.MessageBoxManager.Show("Somebody is grumpy.", "Woah...");

            Thread.Sleep(-1);
        }
    }
}
  ]]>
  </code>
  Before we run it, we must add the Glide reference by right-clicking References and selecting Add Reference.
  In the new window select the Browse tab, locate GHIElectronics.NETMF.Glide and click Ok.
  Now that everything is ready, press F5 to run the example.
</example>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.UI.Modal">
            <summary>
            The Modal component displays a box of text to instruct and inform the user.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.Modal.#ctor(System.String,System.UInt16,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new Modal.
            </summary>
            <param name="name">Name</param>
            <param name="alpha">Alpha</param>
            <param name="x">X-axis position.</param>
            <param name="y">Y-axis position.</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.Modal.Render">
            <summary>
            Renders the Modal onto it's parent container's graphics.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.Modal.BackImage">
            <summary>
            Background image.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.Modal.TitlebarHeight">
            <summary>
            Titlebar height.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.Modal.Title">
            <summary>
            Title
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.Modal.TitleFont">
            <summary>
            Title font.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.Modal.TitleFontColor">
            <summary>
            Title font color.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.MessageBox.#ctor(System.String,System.UInt16,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new MessageBox.
            </summary>
            <param name="name">Name</param>
            <param name="alpha">Alpha</param>
            <param name="x">X-axis position.</param>
            <param name="y">Y-axis position.</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.MessageBox.Render">
            <summary>
            Renders the MessageBox onto it's parent container's graphics.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.MessageBox.Message">
            <summary>
            Message
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.MessageBox.MessageFont">
            <summary>
            Message font.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.MessageBox.MessageFontColor">
            <summary>
            Message font color.
            </summary>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.UI.Dropdown">
            <summary>
            THe Dropdown component contains a list of options in which a user can select one.
            </summary>
            <example>
  Create a new .NET Micro Framework project using the Console Application template and call it "Test".
  Next, open Resources.resx, select Add Resource and click Add New Text File.
  In the prompt, name the new resource "Window" and click Add.
  Now, copy the XML below and paste it into the file and save.
  <code>
    <![CDATA[
<Glide Version="x.x.x">
  <Window Name="window" Width="320" Height="240" BackColor="dce3e7">
    <Dropdown Name="dropdown" X="100" Y="104" Width="120" Height="32" Alpha="255" Text="Select:" Font="4" FontColor="000000">
      <Option Value="Data0">Label0</Option>
      <Option Value="Data1">Label1</Option>
      <Option Value="Data2">Label2</Option>
      <Option Value="Data3">Label3</Option>
      <Option Value="Data4">Label4</Option>
      <Option Value="Data5">Label5</Option>
      <Option Value="Data6">Label6</Option>
      <Option Value="Data7">Label7</Option>
      <Option Value="Data8">Label8</Option>
      <Option Value="Data9">Label9</Option>
    </Dropdown>
  </Window>
</Glide>
    ]]>
  </code>
  Open Program.cs and replace the code with the code below:
  <code>
    <![CDATA[
using System.Threading;

using Microsoft.SPOT;

using GHIElectronics.NETMF.Glide;
using GHIElectronics.NETMF.Glide.Display;
using GHIElectronics.NETMF.Glide.UI;

namespace Test
{
    public class Program
    {
        // This will hold the main window.
        static Window window;

        // This will hold our dropdown's list.
        static List list = null;

        public static void Main()
        {
            // Load the window
            window = GlideLoader.LoadWindow(Resources.GetString(Resources.StringResources.Window));

            // Activate touch
            GlideTouch.Initialize();

            // Initialize the window.
            InitWin();

            // Assigning a window to MainWindow flushes it to the screen.
            // This also starts event handling on the window.
            Glide.MainWindow = window;

            Thread.Sleep(-1);
        }

        static void InitWin()
        {
            // Get the Dropdown
            Dropdown dropdown = (Dropdown)window.GetChildByName("dropdown");
            dropdown.TapEvent += new OnTap(dropdown_TapEvent);
            dropdown.ValueChangedEvent += new OnValueChanged(dropdown_ValueChangedEvent);

            // Create the list that the Dropdown uses...
            list = new List(dropdown.Options, 150);
            
            // Or you can provide your own options
            /*
            ArrayList options = new ArrayList()
            {
                // Each object array contains Label, Data
                new object[2] { "Option #1", 1 },
                new object[2] { "Option #2", 2 },
                new object[2] { "Option #3", 3 },
                new object[2] { "Option #4", 4 },
                new object[2] { "Option #5", 5 }
            };
            list = new List(options, 150);
            */
            
            list.CloseEvent += new OnClose(list_CloseEvent);
        }

        // When the Dropdown is tapped it will open it's list.
        static void dropdown_TapEvent(object sender)
        {
            Glide.OpenList(sender, list);
        }

        // This shows when the Dropdown's value changes.
        static void dropdown_ValueChangedEvent(object sender)
        {
            Dropdown dropdown = (Dropdown)sender;
            Debug.Print("Dropdown value: " + dropdown.Text + " : " + dropdown.Value.ToString());
        }

        static void list_CloseEvent(object sender)
        {
            Glide.CloseList();
        }
    }
}
    ]]>
  </code>
  Before we run it, we must add the Glide reference by right-clicking References and selecting Add Reference.
  In the new window select the Browse tab, locate GHIElectronics.NETMF.Glide and click Ok.
  Now that everything is ready, press F5 to run the example.
</example>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.Dropdown.#ctor(System.String,System.UInt16,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new Dropdown.
            </summary>
            <param name="name">Name</param>
            <param name="alpha">Alpha</param>
            <param name="x">X-axis position.</param>
            <param name="y">Y-axis position.</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.Dropdown.TriggerValueChangedEvent(System.Object)">
            <summary>
            Triggers a value changed event.
            </summary>
            <param name="sender">Object associated with the event.</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.Dropdown.Render">
            <summary>
            Renders the Dropdown onto it's parent container's graphics.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.Dropdown.OnTouchDown(GHIElectronics.NETMF.Glide.TouchEventArgs)">
            <summary>
            Handles the touch down event.
            </summary>
            <param name="e">Touch event arguments.</param>
            <returns>Touch event arguments.</returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.Dropdown.OnTouchUp(GHIElectronics.NETMF.Glide.TouchEventArgs)">
            <summary>
            Handles the touch up event.
            </summary>
            <param name="e">Touch event arguments.</param>
            <returns>Touch event arguments.</returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.Dropdown.Dispose">
            <summary>
            Disposes all disposable objects in this object.
            </summary>
        </member>
        <member name="E:GHIElectronics.NETMF.Glide.UI.Dropdown.ValueChangedEvent">
            <summary>
            Value changed event.
            </summary>
        </member>
        <member name="P:GHIElectronics.NETMF.Glide.UI.Dropdown.Options">
            <summary>
            An array of objects that represent the options.
            </summary>
        </member>
        <member name="P:GHIElectronics.NETMF.Glide.UI.Dropdown.Value">
            <summary>
            Value of the selected option.
            </summary>
        </member>
        <member name="P:GHIElectronics.NETMF.Glide.UI.Dropdown.Text">
            <summary>
            Text
            </summary>
        </member>
        <member name="P:GHIElectronics.NETMF.Glide.UI.Dropdown.Font">
            <summary>
            Font used by the text.
            </summary>
        </member>
        <member name="P:GHIElectronics.NETMF.Glide.UI.Dropdown.FontColor">
            <summary>
            Font color.
            </summary>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.UI.TextBox">
            <summary>
            The TextBox component is a single-line text input.
            </summary>
            <example>
  Create a new .NET Micro Framework project using the Console Application template and call it "Test".
  Next, open Resources.resx, select Add Resource and click Add New Text File.
  In the prompt, name the new resource "Window" and click Add.
  Now, copy the XML below and paste it into the file and save.
  <code>
    <![CDATA[
<Glide Version="x.x.x">
  <Window Name="window" Width="320" Height="240" BackColor="dce3e7">
    <TextBox Name="textBox" X="85" Y="104" Width="150" Height="32" Alpha="255" Text="" TextAlign="Left" Font="4" FontColor="000000"/>
  </Window>
</Glide>
  ]]>
  </code>
  Open Program.cs and replace the code with the code below:
  <code>
    <![CDATA[
using System.Threading;

using Microsoft.SPOT;

using GHIElectronics.NETMF.Glide;
using GHIElectronics.NETMF.Glide.Display;
using GHIElectronics.NETMF.Glide.UI;

namespace Test
{
    public class Program
    {
        // This will hold the main window.
        static Window window;

        public static void Main()
        {
            // Load the window
            window = GlideLoader.LoadWindow(Resources.GetString(Resources.StringResources.Window));

            // Activate touch
            GlideTouch.Initialize();

            // Initialize the window.
            InitWin();

            // Assigning a window to MainWindow flushes it to the screen.
            // This also starts event handling on the window.
            Glide.MainWindow = window;

            Thread.Sleep(-1);
        }

        static void InitWin()
        {
            // Get the TextBox
            TextBox textBox = (TextBox)window.GetChildByName("textBox");

            // Add a tap event handler to open the keyboard.
            textBox.TapEvent += new OnTap(Glide.OpenKeyboard);
            
            // Add a value changed handler.
            textBox.ValueChangedEvent += new OnValueChanged(textBox_ValueChangedEvent);
        }

        // Print out the new value.
        static void textBox_ValueChangedEvent(object sender)
        {
            TextBox textBox = (TextBox)window.GetChildByName("textBox");
            Debug.Print(textBox.Text);
        }
    }
}
  ]]>
  </code>
  Before we run it, we must add the Glide reference by right-clicking References and selecting Add Reference.
  In the new window select the Browse tab, locate GHIElectronics.NETMF.Glide and click Ok.
  Now that everything is ready, press F5 to run the example.
</example>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.TextBox.#ctor(System.String,System.UInt16,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new TextBox.
            </summary>
            <param name="name">Name</param>
            <param name="alpha">Alpha</param>
            <param name="x">X-axis position.</param>
            <param name="y">Y-axis position.</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.TextBox.Render">
            <summary>
            Renders the TextBox onto it's parent container's graphics.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.TextBox.Dispose">
            <summary>
            Disposes all disposable objects in this object.
            </summary>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.MessageBoxManager">
            <summary>
            Manages the MessageBox component.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.MessageBoxManager.#ctor">
            <summary>
            Creates a new MessageBoxManager.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.MessageBoxManager.Show(System.String)">
            <summary>
            Shows a MessageBox on screen.
            </summary>
            <param name="message">Message</param>
            <returns></returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.MessageBoxManager.Show(System.String,System.String)">
            <summary>
            Shows a MessageBox on screen.
            </summary>
            <param name="message">Message</param>
            <param name="title">Title</param>
            <returns></returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.MessageBoxManager.Show(System.String,System.String,GHIElectronics.NETMF.Glide.ModalButtons)">
            <summary>
            Shows a MessageBox on screen.
            </summary>
            <param name="message">Message</param>
            <param name="title">Title</param>
            <param name="buttons">MessageBoxButtons constant.</param>
            <returns></returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.MessageBoxManager.Hide">
            <summary>
            Hides the on screen MessageBox.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.MessageBoxManager.Update(System.String)">
            <summary>
            Updates the MessageBox message.
            </summary>
            <param name="message">Message</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.MessageBoxManager.Update(System.String,System.String)">
            <summary>
            Updates the MessageBox message and title.
            </summary>
            <param name="message">Message</param>
            <param name="title">Title</param>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.MessageBoxManager.IsOpen">
            <summary>
            Indicates whether or not the message box is open.
            </summary>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.GlideUtils">
            <summary>
            The Utils class contains utility methods that help other classes.
            </summary>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.GlideUtils.Convert">
            <summary>
            The Convert class contains methods to convert objects.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.GlideUtils.Convert.ToColor(System.String)">
            <summary>
            Converts a hex color code into a Color object.
            </summary>
            <param name="hexCode">Hex color code.</param>
            <returns>Color object.</returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.GlideUtils.Convert.ToFont(System.String)">
            <summary>
            Converts a string into a Font object.
            </summary>
            <param name="font">A number that represents the font.</param>
            <returns>Font object.</returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.GlideUtils.Convert.ToAlignment(System.String)">
            <summary>
            Converts a string into an alignment flag.
            </summary>
            <param name="alignment"></param>
            <returns></returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.GlideUtils.Convert.ToHorizontalAlign(System.String)">
            <summary>
            Converts a string into a horizontal alignment constant.
            </summary>
            <param name="alignment"></param>
            <returns></returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.GlideUtils.Convert.ToVerticalAlign(System.String)">
            <summary>
            Converts a string into a horizontal alignment constant.
            </summary>
            <param name="alignment"></param>
            <returns></returns>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.GlideUtils.Math">
            <summary>
            The Math class contains methods to perform math functions.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.GlideUtils.Math.MinMax(System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks a value against minimum and maximum limits.
            </summary>
            <param name="value">Value to be checked.</param>
            <param name="min">Minimum value.</param>
            <param name="max">Maximum value.</param>
            <returns>The value limited by min and max.</returns>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.GlideUtils.Debug">
            <summary>
            The Debug class contains methods to assist in debugging.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.GlideUtils.Debug.Print(System.String,System.Object[])">
            <summary>
            Prints a labeled string and array data.
            </summary>
            <param name="label">label</param>
            <param name="array">array</param>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.GlideUtils.Timer">
            <summary>
            Simple class to assist in timing code execution.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.GlideUtils.Timer.Ticks">
            <summary>
            Ticks
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.GlideUtils.Timer.Start">
            <summary>
            Start timing.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.GlideUtils.Timer.Stop(System.String)">
            <summary>
            Stop timing.
            </summary>
            <param name="label">This text will appear before the time when printed.</param>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.UI.ListItem">
            <summary>
            The ListItem class holds information relevant to a specific option in a list-based component.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.ListItem.#ctor(System.String,System.Object)">
            <summary>
            Creates a new ListItem.
            </summary>
            <param name="label">Label</param>
            <param name="value">Value</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.ListItem.Render(Microsoft.SPOT.Bitmap)">
            <summary>
            Renders the ListItem onto the provided bitmap.
            </summary>
            <param name="bitmap">Bitmap this item will be drawn on.</param>
        </member>
        <member name="P:GHIElectronics.NETMF.Glide.UI.ListItem.Label">
            <summary>
            A string of text that describes this item.
            </summary>
        </member>
        <member name="P:GHIElectronics.NETMF.Glide.UI.ListItem.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.Display.Graphics">
            <summary>
            The Graphics class contains a set of methods you can use to draw on itself.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Display.Graphics.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new Graphics object.
            </summary>
            <param name="width">Width</param>
            <param name="height">Height</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Display.Graphics.Clear">
            <summary>
            Clears the Graphics object.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Display.Graphics.Dispose">
            <summary>
            Disposes of the Graphics object.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Display.Graphics.DrawEllipse(Microsoft.SPOT.Presentation.Media.Color,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws an ellipse.
            </summary>
            <param name="colorOutline">Color of the outline.</param>
            <param name="x">X</param>
            <param name="y">Y</param>
            <param name="xRadius">X Radius</param>
            <param name="yRadius">Y Radius</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Display.Graphics.DrawEllipse(Microsoft.SPOT.Presentation.Media.Color,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.SPOT.Presentation.Media.Color,System.Int32,System.Int32,Microsoft.SPOT.Presentation.Media.Color,System.Int32,System.Int32,System.UInt16)">
            <summary>
            Draws an ellipse.
            </summary>
            <param name="colorOutline">Color of the outline.</param>
            <param name="thicknessOutline">Thickness of the outline.</param>
            <param name="x">X</param>
            <param name="y">Y</param>
            <param name="xRadius">X Radius</param>
            <param name="yRadius">Y Radius</param>
            <param name="colorGradientStart">Starting gradient color.</param>
            <param name="xGradientStart">Starting gradient X.</param>
            <param name="yGradientStart">Starting gradient Y.</param>
            <param name="colorGradientEnd">Ending gradient color.</param>
            <param name="xGradientEnd">Ending gradient X.</param>
            <param name="yGradientEnd">Ending gradient Y.</param>
            <param name="opacity">Opacity</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Display.Graphics.DrawImage(System.Int32,System.Int32,Microsoft.SPOT.Bitmap,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws an image.
            </summary>
            <param name="xDst">Destination X.</param>
            <param name="yDst">Destination Y.</param>
            <param name="bitmap">Bitmap</param>
            <param name="xSrc">Source X.</param>
            <param name="ySrc">Source Y.</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Display.Graphics.DrawImage(System.Int32,System.Int32,Microsoft.SPOT.Bitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt16)">
            <summary>
            Draws an image.
            </summary>
            <param name="xDst">Destination X.</param>
            <param name="yDst">Destination Y.</param>
            <param name="bitmap">Bitmap</param>
            <param name="xSrc">Source X.</param>
            <param name="ySrc">Source Y.</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <param name="opacity">Opacity</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Display.Graphics.DrawLine(Microsoft.SPOT.Presentation.Media.Color,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a line.
            </summary>
            <param name="color">Color</param>
            <param name="thickness">Thickness</param>
            <param name="x0">Starting X.</param>
            <param name="y0">Starting Y.</param>
            <param name="x1">Ending X.</param>
            <param name="y1">Ending Y.</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Display.Graphics.DrawRectangle(Microsoft.SPOT.Presentation.Media.Color,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.SPOT.Presentation.Media.Color,System.Int32,System.Int32,Microsoft.SPOT.Presentation.Media.Color,System.Int32,System.Int32,System.UInt16)">
            <summary>
            Draws a rectangle.
            </summary>
            <param name="colorOutline">Color of the outline.</param>
            <param name="thicknessOutline">Thickness of the outline.</param>
            <param name="x">X</param>
            <param name="y">Y</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <param name="xCornerRadius">X corner radius.</param>
            <param name="yCornerRadius">Y corner radius.</param>
            <param name="colorGradientStart">Starting gradient color.</param>
            <param name="xGradientStart">Starting gradient X.</param>
            <param name="yGradientStart">Starting gradient Y.</param>
            <param name="colorGradientEnd">Ending gradient color.</param>
            <param name="xGradientEnd">Ending gradient X.</param>
            <param name="yGradientEnd">Ending gradient Y.</param>
            <param name="opacity">Opacity</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Display.Graphics.DrawRectangle(GHIElectronics.NETMF.Glide.Geom.Rectangle,Microsoft.SPOT.Presentation.Media.Color,System.UInt16)">
            <summary>
            Draws a rectangle.
            </summary>
            <param name="rect">Rectangle</param>
            <param name="color">Color</param>
            <param name="opacity">Opacity</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Display.Graphics.DrawText(System.String,Microsoft.SPOT.Font,Microsoft.SPOT.Presentation.Media.Color,System.Int32,System.Int32)">
            <summary>
            Draws text.
            </summary>
            <param name="text">Text</param>
            <param name="font">Font</param>
            <param name="color">Color</param>
            <param name="x">X</param>
            <param name="y">Y</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Display.Graphics.DrawTextInRect(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,Microsoft.SPOT.Presentation.Media.Color,Microsoft.SPOT.Font)">
            <summary>
            Draws text in a rectangle.
            </summary>
            <param name="text">Text</param>
            <param name="x">X</param>
            <param name="y">Y</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <param name="dtFlags">Flags found in Bitmap.</param>
            <param name="color">Color</param>
            <param name="font">Font</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Display.Graphics.DrawTextInRect(System.String@,System.Int32@,System.Int32@,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,Microsoft.SPOT.Presentation.Media.Color,Microsoft.SPOT.Font)">
            <summary>
            Draws text in a rectangle.
            </summary>
            <param name="text">Text</param>
            <param name="xRelStart"></param>
            <param name="yRelStart"></param>
            <param name="x">X</param>
            <param name="y">Y</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <param name="dtFlags">Flags found in Bitmap.</param>
            <param name="color">Color</param>
            <param name="font">Font</param>
            <returns></returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Display.Graphics.DrawTextInRect(System.String,GHIElectronics.NETMF.Glide.Geom.Rectangle,System.UInt32,Microsoft.SPOT.Presentation.Media.Color,Microsoft.SPOT.Font)">
            <summary>
            Draws text in a rectangle.
            </summary>
            <param name="text">Text</param>
            <param name="rect">Rectangle</param>
            <param name="dtFlags">Flags found in Bitmap.</param>
            <param name="color">Color</param>
            <param name="font">Font</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Display.Graphics.Flush">
            <summary>
            Flushes the Graphics object to the screen.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Display.Graphics.Flush(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Flushes the Graphics object to the screen.
            </summary>
            <param name="x">X</param>
            <param name="y">Y</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Display.Graphics.GetBitmap">
            <summary>
            Bitmap used by the Graphics object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Display.Graphics.Scale9Image(System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.SPOT.Bitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt16)">
            <summary>
            Resizes images without distortion.
            </summary>
            <param name="xDst">Destination X.</param>
            <param name="yDst">Destination Y.</param>
            <param name="widthDst">Width</param>
            <param name="heightDst">Height</param>
            <param name="bitmap">Bitmap</param>
            <param name="leftBorder">Left border.</param>
            <param name="topBorder">Top border.</param>
            <param name="rightBorder">Right border.</param>
            <param name="bottomBorder">Bottom border.</param>
            <param name="opacity">Opacity</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Display.Graphics.Scale9Image(System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.SPOT.Bitmap,System.Int32,System.UInt16)">
            <summary>
            Resizes images without distortion.
            </summary>
            <param name="xDst">Destination X.</param>
            <param name="yDst">Destination Y.</param>
            <param name="widthDst">Width</param>
            <param name="heightDst">Height</param>
            <param name="bitmap">Bitmap</param>
            <param name="border">Border</param>
            <param name="opacity">Opacity</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Display.Graphics.SetClippingRectangle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the clipping rectangle.
            </summary>
            <param name="x">X</param>
            <param name="y">Y</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Display.Graphics.StretchImage(System.Int32,System.Int32,Microsoft.SPOT.Bitmap,System.Int32,System.Int32,System.UInt16)">
            <summary>
            Stretch an image.
            </summary>
            <param name="xDst">Destination X.</param>
            <param name="yDst">Destination Y.</param>
            <param name="bitmap">Bitmap</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <param name="opacity">Opacity</param>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.UI.DataGridItem">
            <summary>
            The DataGridItem class describes an item in a DataGrid component.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.DataGridItem.Data">
            <summary>
            Contains the data for each column within this row.
            </summary>
        </member>
        <member name="F:GHIElectronics.NETMF.Glide.UI.DataGridItem.DataType">
            <summary>
            Contains the data type for each column within this row.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.DataGridItem.#ctor(System.Object[])">
            <summary>
            Creates a new DataGridItem.
            </summary>
            <param name="data">Object containing data for each column.</param>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.DataGridItem.CompareTo(System.Object)">
            <summary>
            This is used to be compliant with IComparable.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.UI.DataGridItem.CompareTo(GHIElectronics.NETMF.Glide.UI.DataGridItem,System.Int32)">
            <summary>
            Compares this item's column to another DataGridItem's column.
            </summary>
            <param name="row">DataGridItem object.</param>
            <param name="columnIndex">Column index.</param>
            <returns>Number indicating how it should be positioned.</returns>
        </member>
        <member name="T:GHIElectronics.NETMF.Glide.Geom.Size">
            <summary>
             The Size struct indicates the width and height of an object.
            </summary>
        </member>
        <member name="M:GHIElectronics.NETMF.Glide.Geom.Size.ToString">
            <summary>
            Formats the size as a string for debugging.
            </summary>
            <returns>The size as a string. E.g. [100 x 100]</returns>
        </member>
        <member name="P:GHIElectronics.NETMF.Glide.Geom.Size.Width">
            <summary>
            The width of an object, in pixels.
            </summary>
        </member>
        <member name="P:GHIElectronics.NETMF.Glide.Geom.Size.Height">
            <summary>
            The height of an object, in pixels.
            </summary>
        </member>
    </members>
</doc>
